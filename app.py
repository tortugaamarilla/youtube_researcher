import os
import time
import logging
import tempfile
import concurrent.futures
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime, timedelta
import pandas as pd
import streamlit as st
import traceback
import requests
import random
import base64
import json
import hashlib
import uuid
from io import BytesIO

from youtube_scraper import YouTubeAnalyzer, check_proxy
from llm_analyzer import LLMAnalyzer
from utils import parse_youtube_url, get_proxy_list

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —Ñ–æ—Ä–º–∞—Ç –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
    """
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.INFO)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if not root_logger.handlers:
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        console_handler.setFormatter(formatter)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É
        root_logger.addHandler(console_handler)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        log_dir = "logs"
        if not os.path.exists(log_dir):
            os.makedirs(log_dir)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
        try:
            file_handler = logging.FileHandler(f"{log_dir}/app.log")
            file_handler.setLevel(logging.INFO)
            file_handler.setFormatter(formatter)
            root_logger.addHandler(file_handler)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª: {e}")
    
    logger.info("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="YouTube Researcher",
    page_icon="üé¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π OpenAI –∏ Claude
OPENAI_MODELS = [
    "gpt-4o",
    "gpt-4-turbo",
    "gpt-4-vision-preview",
    "gpt-3.5-turbo"
]

CLAUDE_MODELS = [
    "claude-3-7-sonnet-20240620",
    "claude-3-5-sonnet-20240620",
    "claude-3-opus-20240229"
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ –¥–∞—Ç–µ
def filter_by_date(df: pd.DataFrame, max_days: int) -> pd.DataFrame:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç DataFrame –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    
    Args:
        df (pd.DataFrame): DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–∏–¥–µ–æ.
        max_days (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
        
    Returns:
        pd.DataFrame: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame.
    """
    if max_days <= 0 or "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏" not in df.columns:
        return df
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –≤ datetime –æ–±—ä–µ–∫—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        if pd.api.types.is_string_dtype(df["–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"]):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ datetime
            df_with_date = df.copy()
            df_with_date["temp_date"] = pd.to_datetime(df["–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"], errors="coerce")
            
            # –†–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            now = datetime.now()
            days_since = (now - df_with_date["temp_date"]).dt.days
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º
            mask = days_since <= max_days
            return df_with_date[mask].drop(columns=["temp_date"])
        else:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ datetime
            now = datetime.now()
            days_since = (now - df["–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"]).dt.days
            return df[days_since <= max_days]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ: {e}")
        return df

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
def filter_by_views(df: pd.DataFrame, min_views: int) -> pd.DataFrame:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç DataFrame –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.
    
    Args:
        df (pd.DataFrame): DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–∏–¥–µ–æ.
        min_views (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.
        
    Returns:
        pd.DataFrame: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame.
    """
    if min_views <= 0 or "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤" not in df.columns:
        return df
    
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–∞
        views_col = df["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"].copy()
        
        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —É–∂–µ —á–∏—Å–ª–æ–≤—ã–µ
        if pd.api.types.is_numeric_dtype(views_col):
            return df[views_col >= min_views]
        
        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–æ–≤—ã–µ, –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
        # –£–¥–∞–ª—è–µ–º –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–∞
        df_with_numeric_views = df.copy()
        df_with_numeric_views["numeric_views"] = views_col.astype(str).str.replace(r'[^\d]', '', regex=True).astype(float)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        mask = df_with_numeric_views["numeric_views"] >= min_views
        return df_with_numeric_views[mask].drop(columns=["numeric_views"])
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º: {e}")
        return df

def filter_by_search(df: pd.DataFrame, search_query: str) -> pd.DataFrame:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç DataFrame –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –≤–∏–¥–µ–æ.
    
    Args:
        df (pd.DataFrame): DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–∏–¥–µ–æ.
        search_query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
        
    Returns:
        pd.DataFrame: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame.
    """
    if not search_query or search_query.strip() == "":
        return df
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –ø–æ–∏—Å–∫–∞
    search_query = search_query.lower()
    
    # –ò—â–µ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –≤–∏–¥–µ–æ
    if "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ" in df.columns:
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä
        mask = df["–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ"].str.lower().str.contains(search_query, na=False)
        return df[mask]
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π DataFrame
        return df

@st.cache_data(ttl=3600, show_spinner=False)
def get_video_data(url: str, _youtube_analyzer: YouTubeAnalyzer, max_retries: int = 2, cached_data: Dict = None) -> Dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    
    Args:
        url: URL –≤–∏–¥–µ–æ
        _youtube_analyzer: –≠–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ YouTube (–Ω–µ –∫—ç—à–∏—Ä—É–µ—Ç—Å—è)
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        cached_data: –°–ª–æ–≤–∞—Ä—å —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
    Returns:
        Dict: –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
    if not url or not isinstance(url, str) or "youtube.com/watch" not in url and "youtu.be/" not in url:
        logger.warning(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π URL –≤–∏–¥–µ–æ: {url}")
        return {
            "url": url,
            "title": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π URL",
            "views": 0,
            "publication_date": "01.01.2000",
            "channel_name": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        }
    
    # –û—á–∏—â–∞–µ–º URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    clean_url = clean_youtube_url(url)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if cached_data and clean_url in cached_data:
        logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {clean_url}")
        return cached_data[clean_url]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ —á–µ—Ä–µ–∑ –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥
    for attempt in range(max_retries):
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries} –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ: {clean_url}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –≤–º–µ—Å—Ç–æ Selenium
            df = _youtube_analyzer.test_video_parameters_fast([clean_url])
            
            if not df.empty:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä—å
                video_data = {
                    "url": clean_url,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π URL
                    "title": df.iloc[0]["–ó–∞–≥–æ–ª–æ–≤–æ–∫"],
                    "views": df.iloc[0]["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã_—á–∏—Å–ª–æ"] if "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã_—á–∏—Å–ª–æ" in df.columns else int(df.iloc[0]["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"].replace(" ", "")),
                    "publication_date": datetime.now() - timedelta(days=int(df.iloc[0]["–î–Ω–µ–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"])) if df.iloc[0]["–î–Ω–µ–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"] != "‚Äî" else datetime.now(),
                    "days_since_publication": int(df.iloc[0]["–î–Ω–µ–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"]) if df.iloc[0]["–î–Ω–µ–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"] != "‚Äî" else 0,
                    "channel_name": "YouTube" # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –Ω–µ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –∫–∞–Ω–∞–ª–∞
                }
                
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {clean_url}")
                return video_data
            else:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {clean_url}")
                time.sleep(1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {clean_url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
            time.sleep(1)
    
    # –ï—Å–ª–∏ –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ Selenium
    try:
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ Selenium –¥–ª—è {clean_url}")
        video_data = _youtube_analyzer.get_video_details(clean_url)
        
        if video_data and video_data.get("title") and video_data["title"] != "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ":
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Selenium –¥–ª—è {clean_url}")
            return video_data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è {clean_url}: {e}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
    logger.warning(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {clean_url} –Ω–µ —É–¥–∞–ª–∏—Å—å. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
    return {
        "url": clean_url,
        "title": f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ ({clean_url.split('/')[-1]})",
        "views": 0,
        "publication_date": "01.01.2000",
        "channel_name": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
        "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫"
    }

def process_source_links(links: list, 
                        relevance_filters: dict = None, 
                        use_proxies: bool = True,
                        use_all_proxies: bool = False,
                        google_account: dict = None,
                        prewatch_settings: dict = None,
                        progress_container=None,
                        msg_container=None) -> Tuple[list, list]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
    
    Args:
        links: –°–ø–∏—Å–æ–∫ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        relevance_filters: –§–∏–ª—å—Ç—Ä—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        use_proxies: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –ø—Ä–æ–∫—Å–∏
        use_all_proxies: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –≤—Å–µ –ø—Ä–æ–∫—Å–∏ (–¥–∞–∂–µ –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ)
        google_account: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ Google (email, password)
        prewatch_settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        progress_container: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        msg_container: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Returns:
        Tuple[list, list]: –ö–æ—Ä—Ç–µ–∂ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–µ—Ä–≤–æ–≥–æ –∏ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
    """
    if not links:
        if msg_container:
            msg_container.warning("–ù–µ —É–∫–∞–∑–∞–Ω—ã –∏—Å—Ö–æ–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
        return [], []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ YouTube-—Å—Å—ã–ª–∫–∏
    valid_links = [link.strip() for link in links if is_youtube_link(link.strip())]
    if not valid_links:
        if msg_container:
            msg_container.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö YouTube-—Å—Å—ã–ª–æ–∫")
        return [], []
    
    if msg_container:
        msg_container.info(f"–ù–∞–π–¥–µ–Ω–æ {len(valid_links)} –≤–∞–ª–∏–¥–Ω—ã—Ö YouTube-—Å—Å—ã–ª–æ–∫")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º YouTubeAnalyzer
    try:
        progress_text = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..."
        if progress_container:
            progress_bar = progress_container.progress(0, text=progress_text)
        else:
            progress_bar = None
            
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
        proxies = None
        if use_proxies:
            proxies = get_proxy_list(force_all=use_all_proxies)
            if not proxies and not use_all_proxies:
                if msg_container:
                    msg_container.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.")
                return [], []
        
        yt = YouTubeAnalyzer(proxy=proxies, google_account=google_account)
        
        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–∫–∞–∑–∞–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        if google_account and prewatch_settings and prewatch_settings.get('enabled', False):
            total_videos = prewatch_settings.get('total_videos', 10)
            distribution = prewatch_settings.get('distribution', 'even')
            min_watch_time = prewatch_settings.get('min_watch_time', 15)
            max_watch_time = prewatch_settings.get('max_watch_time', 45)
            like_probability = prewatch_settings.get('like_probability', 0.7)
            watch_percentage = prewatch_settings.get('watch_percentage', 0.3)
            
            if msg_container:
                msg_container.info(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä {total_videos} –≤–∏–¥–µ–æ...")
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            videos_to_watch = []
            
            if distribution == 'even':
                # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ –∫–∞–Ω–∞–ª–∞–º
                videos_per_channel = max(1, total_videos // len(valid_links))
                remaining_videos = total_videos - (videos_per_channel * len(valid_links))
                
                if msg_container:
                    msg_container.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–º–µ—Ä–Ω–æ {videos_per_channel} –≤–∏–¥–µ–æ —Å –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
                
                for link in valid_links:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –∫–∞–Ω–∞–ª
                        if "youtube.com/watch" in link or "youtu.be/" in link:
                            videos_to_watch.append(link)
                        else:
                            # –≠—Ç–æ –∫–∞–Ω–∞–ª, –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ
                            channel_videos = yt.get_last_videos_from_channel(link, limit=videos_per_channel)
                            if channel_videos:
                                videos_to_watch.extend(channel_videos)
                                if msg_container:
                                    msg_container.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(channel_videos)} –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞ {link}")
                    except Exception as e:
                        if msg_container:
                            msg_container.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ —Å {link}: {e}")
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–±—Ä–∞–ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
                if len(videos_to_watch) < total_videos and remaining_videos > 0:
                    # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –≤–∏–¥–µ–æ —Å –ø–µ—Ä–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                    for link in valid_links[:min(3, len(valid_links))]:
                        try:
                            if not ("youtube.com/watch" in link or "youtu.be/" in link):
                                extra_videos = yt.get_last_videos_from_channel(
                                    link, 
                                    limit=videos_per_channel + remaining_videos,
                                    offset=videos_per_channel
                                )
                                if extra_videos:
                                    videos_to_watch.extend(extra_videos[:remaining_videos])
                                    remaining_videos -= len(extra_videos[:remaining_videos])
                                    if remaining_videos <= 0:
                                        break
                        except Exception as e:
                            if msg_container:
                                msg_container.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ: {e}")
            else:
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ
                if msg_container:
                    msg_container.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä {total_videos} —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º")
                
                all_channel_videos = []
                
                for link in valid_links:
                    try:
                        if "youtube.com/watch" in link or "youtu.be/" in link:
                            all_channel_videos.append((link, datetime.now())) # –î–ª—è –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                        else:
                            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ —Å –¥–∞—Ç–∞–º–∏
                            channel_videos = yt.get_last_videos_from_channel(link, limit=min(10, total_videos))
                            if channel_videos:
                                for video_url in channel_videos:
                                    try:
                                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                                        video_data_df = yt.test_video_parameters_fast([video_url])
                                        if not video_data_df.empty:
                                            days_since_pub = int(video_data_df.iloc[0]["–î–Ω–µ–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"]) if video_data_df.iloc[0]["–î–Ω–µ–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"] != "‚Äî" else 0
                                            publish_date = datetime.now() - timedelta(days=days_since_pub)
                                            all_channel_videos.append((video_url, publish_date))
                                        else:
                                            all_channel_videos.append((video_url, datetime.now()))
                                    except:
                                        all_channel_videos.append((video_url, datetime.now()))
                    except Exception as e:
                        if msg_container:
                            msg_container.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ —Å {link}: {e}")
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
                all_channel_videos.sort(key=lambda x: x[1], reverse=True)
                
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ URL –≤–∏–¥–µ–æ
                videos_to_watch = [video[0] for video in all_channel_videos[:total_videos]]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            if videos_to_watch:
                if msg_container:
                    msg_container.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä {len(videos_to_watch)} –≤–∏–¥–µ–æ...")
                    
                yt.prewatch_videos(
                    videos_to_watch[:total_videos],
                    min_watch_time=min_watch_time,
                    max_watch_time=max_watch_time,
                    like_probability=like_probability,
                    watch_percentage=watch_percentage
                )
                
                if msg_container:
                    msg_container.success(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")
            else:
                if msg_container:
                    msg_container.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        first_level_recommendations = []
        second_level_recommendations = []
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        total_links = len(valid_links)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É
        for i, link in enumerate(valid_links):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏ (–≤–∏–¥–µ–æ –∏–ª–∏ –∫–∞–Ω–∞–ª)
                is_video = "youtube.com/watch" in link or "youtu.be/" in link
                
                # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ, –æ—á–∏—â–∞–µ–º URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                if is_video:
                    link = clean_youtube_url(link)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                current_progress = (i / total_links)
                progress_text = f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ {i+1}/{total_links}: {link[:50]}..."
                
                if progress_bar:
                    progress_bar.progress(current_progress, text=progress_text)
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ
                if is_video:
                    if msg_container:
                        msg_container.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ: {link}")
                        
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
                    rec1 = yt.get_recommended_videos(link, limit=20)
                    
                    # –û—á–∏—â–∞–µ–º URL —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                    clean_rec1 = []
                    for rec in rec1:
                        if isinstance(rec, dict) and "url" in rec:
                            clean_url = clean_youtube_url(rec["url"])
                            clean_rec = rec.copy()
                            clean_rec["url"] = clean_url
                            clean_rec1.append(clean_rec)
                        elif isinstance(rec, str):
                            clean_rec1.append(clean_youtube_url(rec))
                        else:
                            clean_rec1.append(rec)
                    
                    if clean_rec1:
                        first_level_recommendations.extend(clean_rec1)
                        if msg_container:
                            msg_container.success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(clean_rec1)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è")
                    else:
                        if msg_container:
                            msg_container.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ: {link}")
                else:
                    # –ò–Ω–∞—á–µ, —ç—Ç–æ –∫–∞–Ω–∞–ª
                    if msg_container:
                        msg_container.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞: {link}")
                        
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞
                    videos = yt.get_last_videos_from_channel(link, limit=5)
                    
                    if videos:
                        if msg_container:
                            msg_container.success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(videos)} –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞")
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞
                        for j, video_url in enumerate(videos):
                            # –û—á–∏—â–∞–µ–º URL –≤–∏–¥–µ–æ
                            clean_video_url = clean_youtube_url(video_url)
                            
                            rec1 = yt.get_recommended_videos(clean_video_url, limit=20)
                            
                            # –û—á–∏—â–∞–µ–º URL —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                            clean_rec1 = []
                            for rec in rec1:
                                if isinstance(rec, dict) and "url" in rec:
                                    clean_url = clean_youtube_url(rec["url"])
                                    clean_rec = rec.copy()
                                    clean_rec["url"] = clean_url
                                    clean_rec1.append(clean_rec)
                                elif isinstance(rec, str):
                                    clean_rec1.append(clean_youtube_url(rec))
                                else:
                                    clean_rec1.append(rec)
                            
                            if clean_rec1:
                                first_level_recommendations.extend(clean_rec1)
                                if msg_container:
                                    msg_container.success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(clean_rec1)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ –≤–∏–¥–µ–æ {j+1}/{len(videos)}")
                            else:
                                if msg_container:
                                    msg_container.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ {j+1}")
                    else:
                        if msg_container:
                            msg_container.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞: {link}")
                
            except Exception as e:
                if msg_container:
                    msg_container.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ {link}: {str(e)}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ {link}: {str(e)}")
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        first_level_recommendations = list(set(first_level_recommendations))
        
        if msg_container:
            msg_container.success(f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(first_level_recommendations)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è, –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        if first_level_recommendations:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_text = "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è..."
            if progress_bar:
                progress_bar.progress(0.7, text=progress_text)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
            sample_size = min(len(first_level_recommendations), 5)
            sample_recommendations = random.sample(first_level_recommendations, sample_size)
            
            if msg_container:
                msg_container.info(f"–í—ã–±—Ä–∞–Ω–æ {sample_size} –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
            for j, rec_url in enumerate(sample_recommendations):
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    if progress_bar:
                        current_progress = 0.7 + (0.3 * (j / sample_size))
                        progress_bar.progress(current_progress, text=f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ 2-–≥–æ —É—Ä–æ–≤–Ω—è {j+1}/{sample_size}")
                    
                    # –û—á–∏—â–∞–µ–º URL —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    clean_rec_url = clean_youtube_url(rec_url)
                    
                    rec2 = yt.get_recommended_videos(clean_rec_url, limit=10)
                    
                    # –û—á–∏—â–∞–µ–º URL —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
                    clean_rec2 = []
                    for rec in rec2:
                        if isinstance(rec, dict) and "url" in rec:
                            clean_url = clean_youtube_url(rec["url"])
                            clean_rec = rec.copy()
                            clean_rec["url"] = clean_url
                            clean_rec2.append(clean_rec)
                        elif isinstance(rec, str):
                            clean_rec2.append(clean_youtube_url(rec))
                        else:
                            clean_rec2.append(rec)
                    
                    if clean_rec2:
                        second_level_recommendations.extend(clean_rec2)
                        if msg_container:
                            msg_container.success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(clean_rec2)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏–∑ –≤–∏–¥–µ–æ {j+1}/{sample_size}")
                    else:
                        if msg_container:
                            msg_container.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –≤–∏–¥–µ–æ {j+1}")
                            
                except Exception as e:
                    if msg_container:
                        msg_container.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è: {str(e)}")
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è: {str(e)}")
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
            second_level_recommendations = list(set(second_level_recommendations))
            
            # –£–¥–∞–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ
            second_level_recommendations = [url for url in second_level_recommendations if url not in first_level_recommendations]
            
            if msg_container:
                msg_container.success(f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(second_level_recommendations)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_bar.progress(1.0)
        status_text.text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        update_stats(force=True)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
        try:
            yt.close()
        except:
            pass
        
        return first_level_recommendations, second_level_recommendations
            
    except Exception as e:
        if msg_container:
            msg_container.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            msg_container.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä–∞ Chrome –∏ –¥—Ä–∞–π–≤–µ—Ä–∞ chromedriver.")
            
            driver_status = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä"
            proxy_status = "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–∫—Å–∏" if use_proxies else "‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã"
            
            msg_container.error(f"""
            **–°—Ç–∞—Ç—É—Å –¥—Ä–∞–π–≤–µ—Ä–∞:** {driver_status}
            **–°—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏:** {proxy_status}
            
            **–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:**
            ```
            {str(e)}
            ```
            """)
            
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        return [], []

def check_video_relevance(
    llm_analyzer: LLMAnalyzer,
    videos: List[Dict[str, Any]],
    reference_topics: List[str],
    relevance_temp: float
) -> List[Dict[str, Any]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ç–µ–º.
    
    Args:
        llm_analyzer (LLMAnalyzer): –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä LLM.
        videos (List[Dict[str, Any]]): –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
        reference_topics (List[str]): –°–ø–∏—Å–æ–∫ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ç–µ–º.
        relevance_temp (float): –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.
        
    Returns:
        List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ.
    """
    relevant_videos = []
    
    for video in videos:
        if not video.get("title"):
            continue
            
        relevance_result = llm_analyzer.check_relevance(
            video["title"],
            reference_topics,
            temperature=relevance_temp
        )
        
        video["relevance_score"] = relevance_result.get("score", 0.0)
        video["relevance_explanation"] = relevance_result.get("explanation", "")
        
        if relevance_result.get("relevant", True):
            relevant_videos.append(video)
            
    return relevant_videos

def extract_thumbnail_text(
    llm_analyzer: LLMAnalyzer,
    youtube_analyzer: YouTubeAnalyzer,
    videos: List[Dict[str, Any]]
) -> List[Dict[str, Any]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –º–∏–Ω–∏–∞—Ç—é—Ä –≤–∏–¥–µ–æ.
    
    Args:
        llm_analyzer (LLMAnalyzer): –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä LLM.
        youtube_analyzer (YouTubeAnalyzer): –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä YouTube.
        videos (List[Dict[str, Any]]): –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ.
        
    Returns:
        List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.
    """
    for video in videos:
        if not video.get("thumbnail_url"):
            video["thumbnail_text"] = ""
            continue
            
        thumbnail = youtube_analyzer.download_thumbnail(video["thumbnail_url"])
        
        if thumbnail:
            video["thumbnail_text"] = llm_analyzer.extract_text_from_thumbnail(thumbnail)
        else:
            video["thumbnail_text"] = ""
            
    return videos

def create_results_dataframe(videos: List[Dict[str, Any]]) -> pd.DataFrame:
    """
    –°–æ–∑–¥–∞–µ—Ç DataFrame –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ.
    
    Args:
        videos (List[Dict[str, Any]]): –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ.
        
    Returns:
        pd.DataFrame: DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
    """
    if not videos:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
        return pd.DataFrame(columns=[
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ", "URL", "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", 
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", "–ò—Å—Ç–æ—á–Ω–∏–∫", 
            "–û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏", "–¢–µ–∫—Å—Ç –∏–∑ Thumbnail"
        ])
        
    data = []
    
    for video in videos:
        source_type = video.get("source_type", "unknown")
        if source_type == "channel" or source_type == "direct_link":
            source = "–ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫"
        elif source_type == "recommendation_level_1":
            source = "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ 1–≥–æ —É—Ä–æ–≤–Ω—è"
        elif source_type == "recommendation_level_2":
            source = "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ 2–≥–æ —É—Ä–æ–≤–Ω—è"
        else:
            source = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
        pub_date = video.get("publication_date")
        if pub_date and isinstance(pub_date, datetime):
            formatted_date = pub_date.strftime("%Y-%m-%d %H:%M")
        else:
            formatted_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
        data.append({
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ": video.get("title", "–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞"),
            "URL": video.get("url", ""),
            "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏": formatted_date,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤": video.get("views", 0),
            "–ò—Å—Ç–æ—á–Ω–∏–∫": source,
            "–û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏": video.get("relevance_score", 0.0),
            "–¢–µ–∫—Å—Ç –∏–∑ Thumbnail": video.get("thumbnail_text", "")
        })
        
    # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    df = pd.DataFrame(data)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É DataFrame –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–°–æ–∑–¥–∞–Ω DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: {df.columns.tolist()}")
    logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ DataFrame: {len(df)}")
    
    return df

def check_proxies() -> List[Dict[str, str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤.
    
    Returns:
        List[Dict[str, str]]: –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏.
    """
    working_proxies = []
    all_proxies = get_proxy_list()
    
    if not all_proxies:
        st.warning("–í –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞. –†–∞–±–æ—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–∞, –Ω–æ –≤–µ—Ä–æ—è—Ç–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ YouTube.")
        return []
    
    st.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {len(all_proxies)} –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤...")
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    check_details = st.empty()
    proxy_details = []
    
    for i, proxy in enumerate(all_proxies):
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_value = float(i) / len(all_proxies)
            progress_bar.progress(progress_value)
            status_text.text(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏ {proxy['server']}...")
            
            # –§–æ—Ä–º–∞—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
            proxy_info = f"–ü—Ä–æ–∫—Å–∏ {proxy['server']}, –ª–æ–≥–∏–Ω: {proxy.get('username', '–Ω–µ—Ç')}"
            proxy_details.append(proxy_info)
            check_details.text("\n".join(proxy_details + ["–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞..."]))
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é check_proxy –∏–∑ youtube_scraper.py
            proxy_string = f"{proxy['server'].split(':')[0]}:{proxy['server'].split(':')[1]}:{proxy['username']}:{proxy['password']}"
            is_working, message = check_proxy(proxy_string)
            
            if is_working:
                working_proxies.append(proxy)
                proxy_details[-1] = f"{proxy_info} - –†–ê–ë–û–¢–ê–ï–¢! ({message})"
                st.success(f"–ü—Ä–æ–∫—Å–∏ {proxy['server']} —Ä–∞–±–æ—Ç–∞–µ—Ç! {message}")
            else:
                proxy_details[-1] = f"{proxy_info} - –ù–ï –†–ê–ë–û–¢–ê–ï–¢: {message}"
                st.error(f"–ü—Ä–æ–∫—Å–∏ {proxy['server']} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {message}")
                
        except Exception as e:
            logger.error(f"–ü—Ä–æ–∫—Å–∏ {proxy['server']} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
            proxy_details[-1] = f"{proxy_info} - –û–®–ò–ë–ö–ê: {str(e)[:50]}..."
            st.error(f"–ü—Ä–æ–∫—Å–∏ {proxy['server']} –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É: {str(e)[:100]}...")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_bar.progress(1.0)
    status_text.empty()
    
    if not working_proxies:
        # –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
        st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        option_cols = st.columns(2)
        with option_cols[0]:
            if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ –≤—Å–µ–º–∏ –ø—Ä–æ–∫—Å–∏"):
                all_proxies = get_proxy_list()
                if all_proxies:
                    st.session_state.working_proxies = all_proxies
                    st.success(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ {len(all_proxies)} –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—ã")
        with option_cols[1]:
            if st.button("–†–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø—Ä–æ–∫—Å–∏"):
                st.session_state.use_proxy = False
                st.warning("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–±–æ—Ç—É –±–µ–∑ –ø—Ä–æ–∫—Å–∏. YouTube –º–æ–∂–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø.")
    else:
        st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(working_proxies)} —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏ –∏–∑ {len(all_proxies)}")
        
    return working_proxies

def process_youtube_channels(youtube_urls, proxies=None, max_videos=5, sections=None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ YouTube –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    Args:
        youtube_urls (list): –°–ø–∏—Å–æ–∫ URL-–∞–¥—Ä–µ—Å–æ–≤ –∫–∞–Ω–∞–ª–æ–≤ YouTube
        proxies (list, optional): –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        max_videos (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        sections (list, optional): –†–∞–∑–¥–µ–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (videos, shorts –∏ —Ç.–¥.)
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–æ–≤
    """
    logger.info(f"–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ {len(youtube_urls)} YouTube –∫–∞–Ω–∞–ª–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º YouTube —Å–∫—Ä–∞–ø–µ—Ä —Å –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
    try:
        youtube_analyzer = None
        if proxies:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
            for proxy in proxies:
                try:
                    logger.info(f"–ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏: {proxy}")
                    youtube_analyzer = YouTubeAnalyzer(proxy=proxy)
                    if youtube_analyzer and youtube_analyzer.driver:
                        logger.info(f"–£—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥—Ä–∞–π–≤–µ—Ä —Å –ø—Ä–æ–∫—Å–∏: {proxy}")
                        break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–æ–∫—Å–∏ {proxy}: {e}")
                    if youtube_analyzer:
                        youtube_analyzer.close_driver()
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –ø—Ä–æ–∫—Å–∏, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–∏—Ö
        if not youtube_analyzer or not youtube_analyzer.driver:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –ø—Ä–æ–∫—Å–∏, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
            youtube_analyzer = YouTubeAnalyzer()
            
        # –ï—Å–ª–∏ –¥–∞–∂–µ –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        if not youtube_analyzer or not youtube_analyzer.driver:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å YouTube –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")
            return {
                "success": False,
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ YouTube",
                "channels_processed": 0,
                "channels": []
            }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        results = youtube_analyzer.process_channels(
            channel_urls=youtube_urls,
            max_videos=max_videos,
            sections=sections
        )
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        youtube_analyzer.close_driver()
        
        return results
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ YouTube –∫–∞–Ω–∞–ª–æ–≤: {e}")
        traceback.print_exc()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if youtube_analyzer:
            youtube_analyzer.close_driver()
            
        return {
            "success": False,
            "error": str(e),
            "channels_processed": 0,
            "channels": []
        }

def test_recommendations(source_links: List[str], 
                         google_account: Dict[str, str] = None, 
                         prewatch_settings: Dict[str, Any] = None,
                         channel_videos_limit: int = 5,
                         recommendations_per_video: int = 5,
                         max_days_since_publication: int = 7,
                         min_video_views: int = 10000,
                         existing_analyzer: YouTubeAnalyzer = None) -> pd.DataFrame:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.
    
    Args:
        source_links (List[str]): –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ/–∫–∞–Ω–∞–ª—ã YouTube
        google_account (Dict[str, str], optional): –ê–∫–∫–∞—É–Ω—Ç Google –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        prewatch_settings (Dict[str, Any], optional): –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        channel_videos_limit (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞
        recommendations_per_video (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
        max_days_since_publication (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        min_video_views (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        existing_analyzer (YouTubeAnalyzer, optional): –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        
    Returns:
        pd.DataFrame: –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    results = []
    source_videos = []  # –í–∏–¥–µ–æ —Å –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, –æ–Ω–∏ –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    progress_bar = st.progress(0)
    status_text = st.empty()
    stats_container = st.container()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    stats = {
        "processed_links": 0,
        "processed_videos": 0,
        "skipped_views": 0,
        "skipped_date": 0,
        "added_videos": 0,
        "total_time": 0,
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        "time_get_recommendations": 0,
        "time_get_video_data": 0,
        "count_get_recommendations": 0,
        "count_get_video_data": 0
    }
    
    # –¢–∞–π–º–µ—Ä—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    timers = {
        "current_operation_start": 0,
        "recommendation_times": [],
        "video_data_times": []
    }
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤
    def start_timer(operation_name):
        timers["current_operation"] = operation_name
        timers["current_operation_start"] = time.time()
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation_name}")
        
    def end_timer(operation_name):
        if timers["current_operation_start"] == 0:
            return 0
            
        elapsed_time = time.time() - timers["current_operation_start"]
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation_name}, –≤—Ä–µ–º—è: {elapsed_time:.2f}—Å")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if "–ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π" in operation_name.lower():
            timers["recommendation_times"].append(elapsed_time)
            stats["time_get_recommendations"] += elapsed_time
            stats["count_get_recommendations"] += 1
        elif "–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö" in operation_name.lower():
            timers["video_data_times"].append(elapsed_time)
            stats["time_get_video_data"] += elapsed_time
            stats["count_get_video_data"] += 1
            
        return elapsed_time
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    def update_timing_stats():
        pass
    
    start_time = time.time()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
    if existing_analyzer and existing_analyzer.driver:
        youtube_analyzer = existing_analyzer
        status_text.text("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –±—Ä–∞—É–∑–µ—Ä–∞...")
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ YouTube")
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä YouTube
        status_text.text("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞...")
        youtube_analyzer = YouTubeAnalyzer(headless=True, use_proxy=False, google_account=google_account)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä–∞–π–≤–µ—Ä
        youtube_analyzer.setup_driver()
        
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –¥—Ä–∞–π–≤–µ—Ä
        if youtube_analyzer.driver is None:
            status_text.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
            return pd.DataFrame()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏ YouTube
        valid_links = [link.strip() for link in source_links if "youtube.com" in link or "youtu.be" in link]
        
        if not valid_links:
            status_text.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ YouTube. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫.")
            return pd.DataFrame()
            
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä, –≤—ã–ø–æ–ª–Ω—è–µ–º –µ–≥–æ
        if prewatch_settings and prewatch_settings.get("enabled", False):
            # –õ–æ–≥–∏–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞...
            pass
        
        status_text.text(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(valid_links)} —Å—Å—ã–ª–æ–∫...")
        
        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        all_video_sources = []
        all_recommendations = []
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        last_update_time = 0
        update_interval = 5.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ 5 —Å–µ–∫—É–Ω–¥
        last_processed_videos = 0
        last_added_videos = 0
        
        def update_stats(force=False):
            nonlocal last_update_time, last_processed_videos, last_added_videos
            current_time = time.time()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
            # 1. –ü—Ä–æ—à–ª–æ –Ω–µ –º–µ–Ω–µ–µ update_interval —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            # 2. –ò–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (force=True)
            # 3. –ò–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö/–¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
            substantial_change = (stats['processed_videos'] - last_processed_videos >= 5) or (stats['added_videos'] - last_added_videos >= 5)
            
            if not (force or substantial_change or (current_time - last_update_time >= update_interval)):
                return
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Å—á–µ—Ç—á–∏–∫–∏
            last_update_time = current_time
            last_processed_videos = stats['processed_videos']
            last_added_videos = stats['added_videos']
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            time_elapsed = current_time - start_time
            stats["total_time"] = time_elapsed
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            with stats_container:
                st.markdown(f"""
                **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:**
                - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Å—ã–ª–æ–∫: {stats['processed_links']}/{len(valid_links)}
                - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: {stats['processed_videos']}
                - –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ: {stats['added_videos']}
                - –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º: {stats['skipped_views'] + stats['skipped_date']}
                - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {time_elapsed:.1f} —Å–µ–∫
                """)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            update_timing_stats()
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        def quick_filter_video(video_data):
            if not video_data:
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã (–±—ã—Å—Ç—Ä–µ–µ –ø–æ–ª—É—á–∏—Ç—å)
            views_count = video_data.get("views", 0)
            # –ó–∞—â–∏—Ç–∞ –æ—Ç None –∑–Ω–∞—á–µ–Ω–∏–π
            if views_count is None:
                views_count = 0
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ views_count - —á–∏—Å–ª–æ
            if not isinstance(views_count, (int, float)):
                try:
                    views_count = int(views_count)
                except (ValueError, TypeError):
                    views_count = 0
                    
            if views_count < min_video_views:
                stats["skipped_views"] += 1
                logger.info(f"–í–∏–¥–µ–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {video_data.get('url')} (–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {views_count}, –º–∏–Ω–∏–º—É–º: {min_video_views})")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            pub_date = video_data.get("publication_date")
            if pub_date:
                try:
                    days_since_publication = (datetime.now() - pub_date).days
                    if days_since_publication > max_days_since_publication:
                        stats["skipped_date"] += 1
                        logger.info(f"–í–∏–¥–µ–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—é –¥–∞—Ç—ã: {video_data.get('url')} (–¥–Ω–µ–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {days_since_publication}, –º–∞–∫—Å–∏–º—É–º: {max_days_since_publication})")
                        return False
                except Exception as e:
                    # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–Ω–µ–π, –ª—É—á—à–µ –Ω–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —ç—Ç–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è {video_data.get('url')}: {e}")
            else:
                logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è {video_data.get('url')}")
                
            # –í–∏–¥–µ–æ –ø—Ä–æ—à–ª–æ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            logger.info(f"–í–∏–¥–µ–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º: {video_data.get('url')} (–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {views_count}, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º)")
            return True
        
        for i, link in enumerate(valid_links):
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_value = float(i) / len(valid_links)
            progress_bar.progress(progress_value)
            status_text.text(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É {i+1}/{len(valid_links)}: {link}")
            stats["processed_links"] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏ (–∫–∞–Ω–∞–ª –∏–ª–∏ –≤–∏–¥–µ–æ)
            url, is_channel = parse_youtube_url(link)
            
            if is_channel:
                # –î–ª—è –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º channel_videos_limit)
                status_text.text(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞: {url}")
                start_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞: {url}")
                channel_videos = youtube_analyzer.get_last_videos_from_channel(url, limit=channel_videos_limit)
                channel_time = end_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞: {url}")
                status_text.text(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞ –∑–∞ {channel_time:.2f}—Å")
                
                if not channel_videos:
                    status_text.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞ {url}")
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞
                for video_index, video_info in enumerate(channel_videos):
                    video_url = video_info.get("url")
                    if not video_url:
                        continue
                    
                    stats["processed_videos"] += 1
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ {video_index+1}/{len(channel_videos)} —Å –∫–∞–Ω–∞–ª–∞: {video_url}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤–∏–¥–µ–æ
                    status_text.text(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≤–∏–¥–µ–æ: {video_url}")
                    start_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ: {video_url}")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –≤–º–µ—Å—Ç–æ get_video_details
                    video_data_df = youtube_analyzer.test_video_parameters_fast([video_url])
                    video_data = None
                    if not video_data_df.empty:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞—Ä—è, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –∏—Å—Ö–æ–¥–Ω—ã–º
                        video_data = {
                            "url": clean_youtube_url(video_url),
                            "title": video_data_df.iloc[0]["–ó–∞–≥–æ–ª–æ–≤–æ–∫"],
                            "views": video_data_df.iloc[0]["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã_—á–∏—Å–ª–æ"] if "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã_—á–∏—Å–ª–æ" in video_data_df.columns else int(video_data_df.iloc[0]["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"].replace(" ", "")),
                            "publication_date": datetime.now() - timedelta(days=int(video_data_df.iloc[0]["–î–Ω–µ–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"])) if video_data_df.iloc[0]["–î–Ω–µ–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"] != "‚Äî" else datetime.now(),
                            "channel_name": "YouTube",  # –ò–º—è –∫–∞–Ω–∞–ª–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥
                            "channel_url": video_data_df.iloc[0]["–ö–∞–Ω–∞–ª URL"] if "–ö–∞–Ω–∞–ª URL" in video_data_df.columns else None
                        }
                    
                    video_data_time = end_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ: {video_url}")
                    status_text.text(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –∑–∞ {video_data_time:.2f}—Å")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–∏–¥–µ–æ —Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
                    if video_data and quick_filter_video(video_data):
                        video_data["source"] = f"–ö–∞–Ω–∞–ª: {link}"
                        source_videos.append(video_data)
                        stats["added_videos"] += 1
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ
                        status_text.text(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ: {video_url}")
                        start_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ: {video_url}")
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ
                        recommendations = youtube_analyzer.get_recommended_videos_fast(video_url, limit=recommendations_per_video)
                        rec_time = end_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ: {video_url}")
                        status_text.text(f"–ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(recommendations)}) –∑–∞ {rec_time:.2f}—Å")
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ {video_url}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        recommendation_urls = []
                        for rec_info in recommendations:
                            rec_url = rec_info.get("url")
                            if rec_url:
                                # –û—á–∏—â–∞–µ–º URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                                clean_rec_url = clean_youtube_url(rec_url)
                                recommendation_urls.append({
                                    "url": clean_rec_url,
                                    "source_video": clean_youtube_url(video_url)
                                })
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                        all_recommendations.extend(recommendation_urls)
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(recommendation_urls)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ {video_url}")
                    else:
                        # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                        if video_data:
                            status_text.text(f"–í–∏–¥–µ–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {video_url}")
                    
                    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
                    # update_stats()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞
                update_stats(force=True)
            else:
                # –î–ª—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ
                status_text.text(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≤–∏–¥–µ–æ: {url}")
                start_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ: {url}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –≤–º–µ—Å—Ç–æ get_video_details
                video_data_df = youtube_analyzer.test_video_parameters_fast([url])
                video_data = None
                if not video_data_df.empty:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞—Ä—è, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –∏—Å—Ö–æ–¥–Ω—ã–º
                    video_data = {
                        "url": clean_youtube_url(url),
                        "title": video_data_df.iloc[0]["–ó–∞–≥–æ–ª–æ–≤–æ–∫"],
                        "views": video_data_df.iloc[0]["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã_—á–∏—Å–ª–æ"] if "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã_—á–∏—Å–ª–æ" in video_data_df.columns else int(video_data_df.iloc[0]["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"].replace(" ", "")),
                        "publication_date": datetime.now() - timedelta(days=int(video_data_df.iloc[0]["–î–Ω–µ–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"])) if video_data_df.iloc[0]["–î–Ω–µ–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"] != "‚Äî" else datetime.now(),
                        "channel_name": "YouTube",  # –ò–º—è –∫–∞–Ω–∞–ª–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥
                        "channel_url": video_data_df.iloc[0]["–ö–∞–Ω–∞–ª URL"] if "–ö–∞–Ω–∞–ª URL" in video_data_df.columns else None
                    }
                
                video_data_time = end_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ: {url}")
                status_text.text(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –∑–∞ {video_data_time:.2f}—Å")
                stats["processed_videos"] += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–∏–¥–µ–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
                if video_data and quick_filter_video(video_data):
                    video_data["source"] = f"–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {link}"
                    source_videos.append(video_data)
                    stats["added_videos"] += 1
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ
                    status_text.text(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ: {url}")
                    start_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ: {url}")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ
                    recommendations = youtube_analyzer.get_recommended_videos_fast(url, limit=recommendations_per_video)
                    rec_time = end_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ: {url}")
                    status_text.text(f"–ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(recommendations)}) –∑–∞ {rec_time:.2f}—Å")
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ {url}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    recommendation_urls = []
                    for rec_info in recommendations:
                        rec_url = rec_info.get("url")
                        if rec_url:
                            # –û—á–∏—â–∞–µ–º URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                            clean_rec_url = clean_youtube_url(rec_url)
                            recommendation_urls.append({
                                "url": clean_rec_url,
                                "source_video": clean_youtube_url(url)
                            })
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                    all_recommendations.extend(recommendation_urls)
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(recommendation_urls)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ {url}")
                else:
                    # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                    if video_data:
                        status_text.text(f"–í–∏–¥–µ–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {url}")
                
                # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏
                # update_stats()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(all_recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(all_recommendations)} —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        unique_recommendations = {}
        for rec in all_recommendations:
            rec_url = rec["url"]
            # –ï—Å–ª–∏ —Ç–∞–∫–æ–π URL —É–∂–µ –±—ã–ª, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫
            if rec_url in unique_recommendations:
                unique_recommendations[rec_url]["sources"].append(rec["source_video"])
            else:
                unique_recommendations[rec_url] = {
                    "url": rec_url,
                    "sources": [rec["source_video"]]
                }
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫
        filtered_recommendations = list(unique_recommendations.values())
        status_text.text(f"–û—Å—Ç–∞–ª–æ—Å—å {len(filtered_recommendations)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        logger.info(f"–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å {len(filtered_recommendations)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        processed_recommendations = 0
        added_recommendations = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        batch_size = 5  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∑–∞ —Ä–∞–∑
        for i in range(0, len(filtered_recommendations), batch_size):
            batch = filtered_recommendations[i:i+batch_size]
            status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π {i+1}-{min(i+batch_size, len(filtered_recommendations))} –∏–∑ {len(filtered_recommendations)}")
            
            # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –≤—Å–µ–≥–æ –ø–∞–∫–µ—Ç–∞
            start_timer(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π {i+1}-{min(i+batch_size, len(filtered_recommendations))}")
            
            for rec in batch:
                rec_url = rec["url"]
                processed_recommendations += 1
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
                start_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {rec_url}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –≤–º–µ—Å—Ç–æ get_video_details
                rec_data_df = youtube_analyzer.test_video_parameters_fast([rec_url])
                rec_data = None
                if not rec_data_df.empty:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞—Ä—è, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –∏—Å—Ö–æ–¥–Ω—ã–º
                    try:
                        rec_data = {
                            "url": rec_url,  # URL —É–∂–µ –æ—á–∏—â–µ–Ω –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —ç—Ç–∞–ø–µ
                            "title": rec_data_df.iloc[0]["–ó–∞–≥–æ–ª–æ–≤–æ–∫"],
                            "views": rec_data_df.iloc[0]["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã_—á–∏—Å–ª–æ"] if "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã_—á–∏—Å–ª–æ" in rec_data_df.columns else int(rec_data_df.iloc[0]["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"].replace(" ", "")),
                            "publication_date": datetime.now() - timedelta(days=int(rec_data_df.iloc[0]["–î–Ω–µ–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"])) if rec_data_df.iloc[0]["–î–Ω–µ–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"] != "‚Äî" else datetime.now(),
                            "channel_name": "YouTube",  # –ò–º—è –∫–∞–Ω–∞–ª–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥
                            "channel_url": rec_data_df.iloc[0]["–ö–∞–Ω–∞–ª URL"] if "–ö–∞–Ω–∞–ª URL" in rec_data_df.columns else None
                        }
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ {rec_url}: {e}")
                        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞
                        rec_data = {
                            "url": rec_url,
                            "title": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫",
                            "views": min_video_views,  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ –ø—Ä–æ–π–¥–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
                            "publication_date": datetime.now(),  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ –ø—Ä–æ–π–¥–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –¥–∞—Ç–µ
                            "channel_name": "YouTube",
                            "channel_url": None
                        }
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ {rec_url}")
                
                video_data_time = end_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {rec_url}")
                stats["processed_videos"] += 1
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–º –≤–∏–¥–µ–æ
                if rec_data and quick_filter_video(rec_data):
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç–æ–∂–µ –æ—á–∏—â–µ–Ω—ã –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    clean_sources = [clean_youtube_url(src) for src in rec["sources"]]
                    source_str = ", ".join([f"–≤–∏–¥–µ–æ {src.split('watch?v=')[-1]}" for src in clean_sources])
                    rec_data["source"] = f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è: {source_str}"
                    results.append(rec_data)
                    stats["added_videos"] += 1
                    added_recommendations += 1
                    logger.info(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è {rec_url} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–≤—Å–µ–≥–æ: {added_recommendations})")
                else:
                    if rec_data:
                        logger.info(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è {rec_url} –Ω–µ –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")
                
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
            
            # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—Å–µ–≥–æ –ø–∞–∫–µ—Ç–∞
            batch_time = end_timer(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π {i+1}-{min(i+batch_size, len(filtered_recommendations))}")
            status_text.text(f"–ü–∞–∫–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {batch_time:.2f}—Å")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–∞, –∞ –Ω–µ –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            update_stats()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –≤–∏–¥–µ–æ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        # –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∫–∞–∫ –¥—É–±–ª–∏–∫–∞—Ç—ã
        results = source_videos + results
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_bar.progress(1.0)
        status_text.text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        update_stats(force=True)
        
    except Exception as e:
        status_text.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        traceback.print_exc()
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –∏–∑–≤–Ω–µ
        if youtube_analyzer and youtube_analyzer is not existing_analyzer:
            youtube_analyzer.quit_driver()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if results:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
        df = pd.DataFrame(results)
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ URL-–∞–¥—Ä–µ—Å–∞ –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–µ –æ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if "url" in df.columns:
            df["url"] = df["url"].apply(clean_youtube_url)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ URL –≤–∏–¥–µ–æ, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω—ã–µ –≤–∏–¥–µ–æ (–∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–µ—Ä–≤—ã–º–∏) —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è
        seen_urls = set()
        unique_df_rows = []
        
        for idx, row in df.iterrows():
            url = row["url"]
            if url not in seen_urls:
                seen_urls.add(url)
                unique_df_rows.append(row)
        
        df = pd.DataFrame(unique_df_rows)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å 1 –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        df.index = range(1, len(df) + 1)
        
        # –í—ã–±–∏—Ä–∞–µ–º –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        columns_to_show = {
            "url": "–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ",
            "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ",
            "publication_date": "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            "views": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
            "source": "–ò—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ",
            "channel_url": "–ö–∞–Ω–∞–ª"
        }
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        existing_columns = {k: v for k, v in columns_to_show.items() if k in df.columns}
        
        if existing_columns:
            df = df[list(existing_columns.keys())]
            df = df.rename(columns=existing_columns)
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ URL –≤–∏–¥–µ–æ
            df = df.drop_duplicates(subset=["–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ"])
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Å—ã–ª–∫–∏ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Streamlit
            df["–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ"] = df["–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ"].apply(
                lambda x: f'<a href="{x}" target="_blank">{x}</a>' if isinstance(x, str) else x
            )
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Streamlit
            if "–ö–∞–Ω–∞–ª" in df.columns:
                df["–ö–∞–Ω–∞–ª"] = df["–ö–∞–Ω–∞–ª"].apply(
                    lambda x: f'<a href="{x}" target="_blank">{x.split("@")[1] if "@" in x else x}</a>' if isinstance(x, str) and x else x
                )
            
            return df
        else:
            return pd.DataFrame()
    else:
        return pd.DataFrame()

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
    setup_logging()
    st.title("YouTube Researcher üé¨")

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ß–∞—Å—Ç—å 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
        with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏", expanded=True):
            use_proxy = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏", value=False)
            
            proxy_option = st.radio(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–∫—Å–∏:",
                options=["–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞", "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"],
                index=0,
                disabled=not use_proxy
            )
            
            proxy_list = []
            
            if proxy_option == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞" and use_proxy:
                proxy_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–æ–∫—Å–∏ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)", type=["txt"])
                
                if proxy_file:
                    proxy_content = proxy_file.read().decode("utf-8")
                    proxy_list = [line.strip() for line in proxy_content.split("\n") if line.strip()]
                    st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(proxy_list)} –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞.")
                    
                    # –û–ø—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏
                    check_proxies = st.checkbox("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏", value=True)
                    
                    if check_proxies and st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∫—Å–∏"):
                        with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏..."):
                            working_proxies = check_proxies_availability(proxy_list)
                            
                            if working_proxies:
                                st.success(f"–†–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏: {len(working_proxies)} –∏–∑ {len(proxy_list)}")
                                proxy_list = working_proxies
                            else:
                                st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏!")
                                
                                # –û–ø—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
                                force_use_all = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏")
                                if force_use_all:
                                    st.warning(f"–ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ {len(proxy_list)} –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
                                else:
                                    proxy_list = []
            
            elif proxy_option == "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é" and use_proxy:
                proxy_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)", height=100)
                
                if proxy_input:
                    proxy_list = [line.strip() for line in proxy_input.split("\n") if line.strip()]
                    st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(proxy_list)} –ø—Ä–æ–∫—Å–∏.")
                    
                    # –û–ø—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏
                    check_proxies = st.checkbox("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏", value=True)
                    
                    if check_proxies and st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∫—Å–∏"):
                        with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏..."):
                            working_proxies = check_proxies_availability(proxy_list)
                            
                            if working_proxies:
                                st.success(f"–†–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏: {len(working_proxies)} –∏–∑ {len(proxy_list)}")
                                proxy_list = working_proxies
                            else:
                                st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏!")
                                
                                # –û–ø—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
                                force_use_all = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏")
                                if force_use_all:
                                    st.warning(f"–ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ {len(proxy_list)} –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
                                else:
                                    proxy_list = []
        
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    tab1, tab2, tab3, tab4 = st.tabs(["–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"])
    
    with tab1:
        # –°—Ç–∞–¥–∏—è 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        st.header("–°—Ç–∞–¥–∏—è 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ Google
        with st.expander("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google", expanded=True):
            use_google_account = st.checkbox("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç–µ Google", value=False)
            google_account = None
            
            if use_google_account:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                auth_source = st.radio(
                    "–ò—Å—Ç–æ—á–Ω–∏–∫ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:",
                    options=["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑ secrets.toml"],
                    index=1
                )
                
                if auth_source == "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
                    col1, col2 = st.columns(2)
                    with col1:
                        email = st.text_input("Email –∞–∫–∫–∞—É–Ω—Ç–∞ Google", key="google_email")
                    with col2:
                        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="google_password")
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
                    if email and password:
                        google_account = {
                            "email": email,
                            "password": password
                        }
                else:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ secrets.toml
                    try:
                        if "google" in st.secrets and st.secrets["google"]["email"] and st.secrets["google"]["password"]:
                            google_account = {
                                "email": st.secrets["google"]["email"],
                                "password": st.secrets["google"]["password"]
                            }
                            st.success(f"‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ secrets.toml ({google_account['email']})")
                        else:
                            st.error("‚ùå –í —Ñ–∞–π–ª–µ secrets.toml –Ω–µ —É–∫–∞–∑–∞–Ω—ã email –∏/–∏–ª–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è Google –∞–∫–∫–∞—É–Ω—Ç–∞")
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ secrets.toml: {str(e)}")
                        st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ .streamlit/secrets.toml –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ")
                
                # –û—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                auth_col1, auth_col2 = st.columns([1, 2])
                with auth_col1:
                    auth_button = st.button("üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Google")
                
                with auth_col2:
                    auth_status = st.empty()
                    if st.session_state.get("is_logged_in", False):
                        auth_status.success(f"‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ {st.session_state.get('google_account', {}).get('email', '')}")

                if auth_button:
                    if not google_account or not google_account.get("email") or not google_account.get("password"):
                        auth_status.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å email –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ Google")
                    else:
                        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google..."):
                            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä YouTube —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                            auth_analyzer = YouTubeAnalyzer(
                                headless=False,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏–¥–∏–º—ã–π —Ä–µ–∂–∏–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                use_proxy=use_proxy,
                                google_account=google_account
                            )
                            
                            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä–∞–π–≤–µ—Ä
                            auth_analyzer.setup_driver()
                            
                            if auth_analyzer.driver:
                                # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                                success = auth_analyzer.login_to_google()
                                
                                if success or auth_analyzer.is_logged_in:
                                    st.session_state.google_account = google_account
                                    st.session_state.is_logged_in = True
                                    st.session_state.auth_analyzer = auth_analyzer
                                    auth_status.success(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! ({google_account['email']})")
                                else:
                                    auth_status.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ Google. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞.")
                                    
                                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏
                                    try:
                                        auth_analyzer.quit_driver()
                                    except:
                                        pass
                            else:
                                auth_status.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            else:
                st.info("–í–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Google –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç")
                
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            st.info("""
            ‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:
            - –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            - –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            - –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏ —Å–µ—Å—Å–∏–∏ –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
            - –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∞–π–ª .streamlit/secrets.toml
            """)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", expanded=True):
            enable_prewatch = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ", value=False)
            prewatch_settings = None
            
            if enable_prewatch:
                col1, col2 = st.columns(2)
                with col1:
                    total_videos = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", min_value=1, max_value=100, value=20)
                    distribution = st.radio(
                        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                        options=["–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º", "–¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –≤–∏–¥–µ–æ"],
                        index=0
                    )
                with col2:
                    min_watch_time = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (—Å–µ–∫)", min_value=5, max_value=60, value=15)
                    max_watch_time = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (—Å–µ–∫)", min_value=min_watch_time, max_value=120, value=45)
                    like_probability = st.slider("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ª–∞–π–∫–∞ (0-1)", min_value=0.0, max_value=1.0, value=0.7, step=0.1)
                    watch_percentage = st.slider("–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ (0-1)", min_value=0.1, max_value=1.0, value=0.3, step=0.1)
                
                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                prewatch_settings = {
                    "enabled": enable_prewatch,
                    "total_videos": total_videos,
                    "distribution": distribution,
                    "min_watch_time": min_watch_time,
                    "max_watch_time": max_watch_time,
                    "like_probability": like_probability,
                    "watch_percentage": watch_percentage
                }
                
                # –û—Ç–¥–µ–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
                st.subheader("–ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                if not st.session_state.get("is_logged_in", False):
                    st.warning("‚ö†Ô∏è –î–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Google –∞–∫–∫–∞—É–Ω—Ç–µ")
                else:
                    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                    prewatch_links = st.text_area(
                        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)",
                        height=100
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —Ä–∞–≤–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                    method_col1, method_col2 = st.columns([1, 1])
                    
                    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö
                    with method_col1:
                        auto_method = st.button("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä", key="auto_method", help="–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä (YouTube –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥)")
                    
                    with method_col2:
                        manual_method = st.button("üë§ –†—É—á–Ω–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", key="manual_method", help="–°–æ–∑–¥–∞–µ—Ç HTML —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ –≤ —Å–≤–æ–µ–º –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ")
                    
                    # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    prewatch_status = st.empty()
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†—É—á–Ω–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä"
                    if manual_method:
                        if not prewatch_links.strip():
                            prewatch_status.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
                        else:
                            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫
                            video_links = [link.strip() for link in prewatch_links.split("\n") if link.strip()]
                            valid_links = [link for link in video_links if "youtube.com" in link or "youtu.be" in link]
                            
                            if not valid_links:
                                prewatch_status.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ YouTube. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫.")
                            else:
                                prewatch_status.info(f"‚è≥ –°–æ–∑–¥–∞–µ–º HTML —Ñ–∞–π–ª –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ {len(valid_links)} –≤–∏–¥–µ–æ...")
                                
                                try:
                                    # –°–æ–∑–¥–∞–µ–º HTML —Ñ–∞–π–ª –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                                    html_content = create_manual_viewing_html(valid_links[:total_videos], 
                                                                        min_watch_time, max_watch_time)
                                    
                                    # –ö–æ–¥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ base64 –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                                    b64 = base64.b64encode(html_content.encode()).decode()
                                    
                                    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏–º –µ—ë
                                    download_html = f'<a href="data:text/html;base64,{b64}" download="youtube_videos_to_watch.html"><button style="background-color: #4CAF50; color: white; padding: 12px 20px; border: none; border-radius: 4px; cursor: pointer; font-size: 16px;">‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å HTML —Ñ–∞–π–ª —Å –≤–∏–¥–µ–æ</button></a>'
                                    
                                    prewatch_status.success(f"‚úÖ HTML —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ {len(valid_links[:total_videos])} –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤!")
                                    st.markdown(download_html, unsafe_allow_html=True)
                                    
                                    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
                                    st.info("""
                                    ### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:
                                    1. –°–∫–∞—á–∞–π—Ç–µ HTML —Ñ–∞–π–ª –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã—à–µ
                                    2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –≥–¥–µ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ YouTube
                                    3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä" –≤ HTML —Ñ–∞–π–ª–µ
                                    4. –ë—Ä–∞—É–∑–µ—Ä –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ –æ–¥–Ω–æ –∑–∞ –¥—Ä—É–≥–∏–º
                                    5. –ö–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                                    6. –ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ YouTube
                                    
                                    ‚ö†Ô∏è **–í–∞–∂–Ω–æ**: –ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–∏–¥–µ–æ.
                                    """)
                                except Exception as e:
                                    prewatch_status.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTML —Ñ–∞–π–ª–∞: {str(e)}")
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä"
                    if auto_method:
                        if not prewatch_links.strip():
                            prewatch_status.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
                        else:
                            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫
                            video_links = [link.strip() for link in prewatch_links.split("\n") if link.strip()]
                            valid_links = [link for link in video_links if "youtube.com" in link or "youtu.be" in link]
                            
                            if not valid_links:
                                prewatch_status.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ YouTube. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫.")
                            else:
                                try:
                                    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä YouTube
                                    existing_analyzer = st.session_state.get("auth_analyzer")
                                    
                                    if existing_analyzer and existing_analyzer.driver:
                                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                                        prewatch_status.info(f"‚è≥ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ {len(valid_links[:total_videos])} –≤–∏–¥–µ–æ...")
                                        
                                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∏–º—ã–π —Ä–µ–∂–∏–º
                                        existing_analyzer.headless = False
                                        
                                        existing_analyzer.prewatch_videos(
                                            valid_links[:total_videos],
                                            min_watch_time=min_watch_time,
                                            max_watch_time=max_watch_time,
                                            like_probability=like_probability,
                                            watch_percentage=watch_percentage
                                        )
                                        prewatch_status.success(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ {len(valid_links[:total_videos])} –≤–∏–¥–µ–æ.")
                                        prewatch_status.warning("‚ö†Ô∏è –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ YouTube, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
                                    else:
                                        prewatch_status.error("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.")
                                except Exception as e:
                                    prewatch_status.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ: {str(e)}")
        
        # –°—Ç–∞–¥–∏—è 2: –°–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        st.header("–°—Ç–∞–¥–∏—è 2: –°–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        with st.expander("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö", expanded=True):
            source_option = st.radio(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Å—ã–ª–æ–∫:",
                options=["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞"],
                index=0
            )
            
            source_links = []
            
            if source_option == "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
                source_input = st.text_area(
                    "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –∫–∞–Ω–∞–ª—ã YouTube (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)",
                    height=150
                )
                
                if source_input:
                    source_links = [line.strip() for line in source_input.split("\n") if line.strip()]
            else:  # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
                source_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)", type=["txt"])
                
                if source_file:
                    source_content = source_file.read().decode("utf-8")
                    source_links = [line.strip() for line in source_content.split("\n") if line.strip()]
            
            if source_links:
                st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(source_links)} —Å—Å—ã–ª–æ–∫.")
                
                # –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä —Å—Å—ã–ª–æ–∫ (–Ω–µ –±–æ–ª–µ–µ 5)
                if len(source_links) > 0:
                    st.write("–ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:")
                    for i, link in enumerate(source_links[:5]):
                        st.write(f"{i+1}. {link}")
                    
                    if len(source_links) > 5:
                        st.write(f"...–∏ –µ—â–µ {len(source_links) - 5} —Å—Å—ã–ª–æ–∫")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã–µ –∏–∑ –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
        with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±–æ—Ä–∞", expanded=True):
            col1, col2 = st.columns(2)
            with col1:
                channel_videos_limit = st.number_input(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞", 
                    min_value=1, 
                    max_value=20, 
                    value=5
                )
            with col2:
                recommendations_per_video = st.number_input(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ", 
                    min_value=1, 
                    max_value=20, 
                    value=5
                )
            
            col3, col4 = st.columns(2)
            with col3:
                max_days_since_publication = st.number_input(
                    "–í—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–¥–Ω–µ–π)", 
                    min_value=1, 
                    max_value=3650,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 10 –ª–µ—Ç (3650 –¥–Ω–µ–π)
                    value=7
                )
            with col4:
                min_video_views = st.number_input(
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", 
                    min_value=0, 
                    max_value=1000000, 
                    value=10000,
                    step=1000
                )
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if st.button("–°–æ–±—Ä–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
            if source_links:
                with st.spinner("–°–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π..."):
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –¥—Ä–∞–π–≤–µ—Ä
                    existing_analyzer = st.session_state.get("auth_analyzer")
                    
                    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –¥—Ä–∞–π–≤–µ—Ä–æ–º
                    results_df = test_recommendations(
                        source_links, 
                        google_account=google_account, 
                        prewatch_settings=prewatch_settings,
                        channel_videos_limit=channel_videos_limit,
                        recommendations_per_video=recommendations_per_video,
                        max_days_since_publication=max_days_since_publication,
                        min_video_views=min_video_views,
                        existing_analyzer=existing_analyzer  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥—Ä–∞–π–≤–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
                    )
                    
                    if not results_df.empty:
                        st.session_state["results_df"] = results_df
                        st.success(f"–°–æ–±—Ä–∞–Ω–æ {len(results_df)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                        
                        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—Å–µ–≥–¥–∞
                        display_results_tab1()
                        
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                        st.info("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å' –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.")
                        # –í—ã–≤–æ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                        st.error("–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
                        st.write("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º")
                        st.write("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)")
                        st.write("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–∞ –∏ —Å–µ—Ç–∏")
            else:
                st.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if "results_df" in st.session_state and not st.session_state["results_df"].empty:
                    st.success(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ({len(st.session_state['results_df'])} –∑–∞–ø–∏—Å–µ–π).")
                    display_results_tab1()
    
    with tab2:
        # –°—Ç–∞–¥–∏—è 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        st.header("–°—Ç–∞–¥–∏—è 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏")
        
        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", expanded=True):
            col1, col2 = st.columns(2)
            with col1:
                min_views = st.number_input(
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", 
                    min_value=0, 
                    value=1000, 
                    step=100
                )
            with col2:
                max_days = st.number_input(
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", 
                    min_value=1,
                    max_value=3650,  # –î–æ–±–∞–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 10 –ª–µ—Ç (3650 –¥–Ω–µ–π)
                    value=30, 
                    step=1
                )
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        with st.expander("–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º", expanded=True):
            search_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤–∏–¥–µ–æ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ)", key="search_query")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if st.button("–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
            if "results_df" in st.session_state and not st.session_state["results_df"].empty:
                df = st.session_state["results_df"].copy()
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
                if "views" in df.columns:
                    df = filter_by_views(df, min_views=min_views)
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                if "publication_date" in df.columns:
                    df = filter_by_date(df, max_days=max_days)
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
                if search_query:
                    df = filter_by_search(df, search_query)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                st.session_state["filtered_df"] = df
                
                if not df.empty:
                    st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(df)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    display_results_tab2()
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    st.info("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞.")
                else:
                    st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
            else:
                st.error("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö
        elif "filtered_df" in st.session_state and not st.session_state["filtered_df"].empty:
            st.success(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ({len(st.session_state['filtered_df'])} –∑–∞–ø–∏—Å–µ–π).")
            display_results_tab2()
    
    with tab3:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        
        if ("filtered_df" in st.session_state and not st.session_state["filtered_df"].empty) or \
           ("results_df" in st.session_state and not st.session_state["results_df"].empty):
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            display_results_tab3()
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ.")
    
    with tab4:
        # –†–∞–∑–¥–µ–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∏–¥–µ–æ
        render_video_tester_section()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∏–¥–µ–æ
def render_video_tester_section():
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∏–¥–µ–æ –≤ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
    """
    st.markdown("## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∏–¥–µ–æ")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é—â—É—é—Å—è —Å–µ–∫—Ü–∏—é
    with st.expander("–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Ä–∞–∑–¥–µ–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", expanded=False):
        st.markdown("""
        –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö YouTube –≤–∏–¥–µ–æ.
        –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ (–ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ) –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å:
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        """)
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ
        video_urls = st.text_area(
            "–°—Å—ã–ª–∫–∏ –Ω–∞ YouTube –≤–∏–¥–µ–æ (–ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ):",
            height=150,
            placeholder="https://www.youtube.com/watch?v=..."
        )
        
        # –û–ø—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        use_fast_method = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", value=True)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        start_analysis = st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        if start_analysis and video_urls:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ
            urls = [url.strip() for url in video_urls.strip().split('\n') if url.strip()]
            
            if not urls:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL
            invalid_urls = []
            valid_urls = []
            
            for url in urls:
                if "youtube.com/watch?v=" in url or "youtu.be/" in url:
                    # –û—á–∏—â–∞–µ–º URL
                    clean_url = clean_youtube_url(url)
                    valid_urls.append(clean_url)
                else:
                    invalid_urls.append(url)
            
            if invalid_urls:
                st.error(f"–°–ª–µ–¥—É—é—â–∏–µ URL –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n" + "\n".join(invalid_urls))
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –∑–∞–º–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏
            start_time = time.time()
            
            with st.spinner(f"–ê–Ω–∞–ª–∏–∑ {len(valid_urls)} –≤–∏–¥–µ–æ..."):
                progress_bar = st.progress(0)
                
                try:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º YouTube –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
                    analyzer = YouTubeAnalyzer(headless=True, use_proxy=False)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    if use_fast_method:
                        results_df = analyzer.test_video_parameters_fast(valid_urls)
                    else:
                        results_df = analyzer.test_video_parameters(valid_urls)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–æ 100%
                    progress_bar.progress(100)
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
                    analyzer.quit_driver()
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    elapsed_time = time.time() - start_time
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    if not results_df.empty:
                        st.success(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed_time:.2f} —Å–µ–∫! –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(results_df)} –≤–∏–¥–µ–æ.")
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–æ–ª–±–µ—Ü –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                        if "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã_—á–∏—Å–ª–æ" in results_df.columns:
                            sorting_df = results_df.sort_values(by="–ü—Ä–æ—Å–º–æ—Ç—Ä—ã_—á–∏—Å–ª–æ", ascending=False)
                            # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                            sorting_df = sorting_df.drop("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã_—á–∏—Å–ª–æ", axis=1)
                            # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å 1 –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
                            sorting_df = sorting_df.reset_index(drop=True)
                            sorting_df.index = range(1, len(sorting_df) + 1)
                            st.dataframe(sorting_df)
                        else:
                            # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å 1 –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
                            results_df = results_df.reset_index(drop=True)
                            results_df.index = range(1, len(results_df) + 1)
                            st.dataframe(results_df)
                    else:
                        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ.")
                
                except Exception as e:
                    st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∏–¥–µ–æ: {str(e)}")
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ expander
                    with st.expander("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏"):
                        st.exception(e)
        
        elif start_analysis:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ.")

# –ü–æ—Å–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ parse_youtube_url –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é

def clean_youtube_url(url: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç URL YouTube –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π URL —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –≤–∏–¥–µ–æ.
    
    Args:
        url (str): –ò—Å—Ö–æ–¥–Ω—ã–π URL YouTube.
        
    Returns:
        str: –û—á–∏—â–µ–Ω–Ω—ã–π URL YouTube –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://www.youtube.com/watch?v=ID_VIDEO
    """
    if not url or not isinstance(url, str):
        return url
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ YouTube URL
    if "youtube.com/watch" not in url and "youtu.be/" not in url:
        return url
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫ youtu.be
        if "youtu.be/" in url:
            video_id = url.split("youtu.be/")[1].split("?")[0].split("#")[0]
            return f"https://www.youtube.com/watch?v={video_id}"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ youtube.com/watch?v=
        if "youtube.com/watch" in url:
            # –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä v=
            if "v=" in url:
                video_id = url.split("v=")[1].split("&")[0].split("#")[0]
                return f"https://www.youtube.com/watch?v={video_id}"
            
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL
        return url
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ YouTube URL: {e}")
        return url

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ 1
def display_results_tab1():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ CSV –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π".
    """
    if "results_df" in st.session_state and not st.session_state["results_df"].empty:
        # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å 1 –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML
        results_df_display = st.session_state["results_df"].copy()
        st.write(results_df_display.to_html(escape=False), unsafe_allow_html=True)
        
        # –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–µ–∑ –∫–Ω–æ–ø–∫–∏
        export_df = st.session_state["results_df"].copy()
        if "–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ" in export_df.columns:
            export_df["–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ"] = export_df["–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ"].str.replace(r'<a href="(.+?)".*?>.*?</a>', r'\1', regex=True)
        
        csv = export_df.to_csv(index=False, sep='\t')
        b64 = base64.b64encode(csv.encode()).decode()
        href = f'<div style="text-align: right; margin: 10px 0;"><a href="data:file/csv;base64,{b64}" download="youtube_results.tsv" style="background-color: #4CAF50; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px;">üìä –°–∫–∞—á–∞—Ç—å TSV —Ñ–∞–π–ª</a></div>'
        st.markdown(href, unsafe_allow_html=True)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å"
def display_results_tab2():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å".
    """
    if "filtered_df" in st.session_state and not st.session_state["filtered_df"].empty:
        # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å 1 –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML
        df_display = st.session_state["filtered_df"].copy()
        st.write(df_display.to_html(escape=False), unsafe_allow_html=True)
        
        # –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–µ–∑ –∫–Ω–æ–ø–∫–∏
        export_df = st.session_state["filtered_df"].copy()
        if "–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ" in export_df.columns:
            export_df["–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ"] = export_df["–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ"].str.replace(r'<a href="(.+?)".*?>.*?</a>', r'\1', regex=True)
        
        csv = export_df.to_csv(index=False, sep='\t')
        b64 = base64.b64encode(csv.encode()).decode()
        href = f'<div style="text-align: right; margin: 10px 0;"><a href="data:file/csv;base64,{b64}" download="youtube_filtered_results.tsv" style="background-color: #4CAF50; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px;">üìä –°–∫–∞—á–∞—Ç—å TSV —Ñ–∞–π–ª</a></div>'
        st.markdown(href, unsafe_allow_html=True)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"
def display_results_tab3():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã".
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ - –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if "filtered_df" in st.session_state and not st.session_state["filtered_df"].empty:
        display_df = st.session_state["filtered_df"].copy()
    else:
        display_df = st.session_state["results_df"].copy()
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å 1 –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML
    display_df = display_df.reset_index(drop=True)
    display_df.index = range(1, len(display_df) + 1)
    st.write(display_df.to_html(escape=False), unsafe_allow_html=True)
    
    # –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–µ–∑ –∫–Ω–æ–ø–∫–∏
    export_df = display_df.copy()
    if "–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ" in export_df.columns:
        export_df["–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ"] = export_df["–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ"].str.replace(r'<a href="(.+?)".*?>.*?</a>', r'\1', regex=True)
    
    csv = export_df.to_csv(index=False, sep='\t')
    b64 = base64.b64encode(csv.encode()).decode()
    href = f'<div style="text-align: right; margin: 10px 0;"><a href="data:file/csv;base64,{b64}" download="youtube_final_results.tsv" style="background-color: #4CAF50; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px;">üìä –°–∫–∞—á–∞—Ç—å TSV —Ñ–∞–π–ª</a></div>'
    st.markdown(href, unsafe_allow_html=True)

if __name__ == "__main__":
    main() 