import os
import time
import logging
import tempfile
import concurrent.futures
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime, timedelta
import pandas as pd
import streamlit as st
import traceback
import requests
import random
import base64
import json
import hashlib
import uuid

from youtube_scraper import YouTubeAnalyzer, check_proxy
from llm_analyzer import LLMAnalyzer
from utils import parse_youtube_url, get_proxy_list

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —Ñ–æ—Ä–º–∞—Ç –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
    """
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.INFO)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if not root_logger.handlers:
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        console_handler.setFormatter(formatter)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É
        root_logger.addHandler(console_handler)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        log_dir = "logs"
        if not os.path.exists(log_dir):
            os.makedirs(log_dir)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
        try:
            file_handler = logging.FileHandler(f"{log_dir}/app.log")
            file_handler.setLevel(logging.INFO)
            file_handler.setFormatter(formatter)
            root_logger.addHandler(file_handler)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª: {e}")
    
    logger.info("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="YouTube Researcher",
    page_icon="üé¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π OpenAI –∏ Claude
OPENAI_MODELS = [
    "gpt-4o",
    "gpt-4-turbo",
    "gpt-4-vision-preview",
    "gpt-3.5-turbo"
]

CLAUDE_MODELS = [
    "claude-3-7-sonnet-20240620",
    "claude-3-5-sonnet-20240620",
    "claude-3-opus-20240229"
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ –¥–∞—Ç–µ
def filter_by_date(video: Dict[str, Any], days_limit: int) -> bool:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –≤–∏–¥–µ–æ –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    
    Args:
        video (Dict[str, Any]): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ.
        days_limit (int): –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º.
        
    Returns:
        bool: True, –µ—Å–ª–∏ –≤–∏–¥–µ–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π, –∏–Ω–∞—á–µ False.
    """
    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ
    if days_limit <= 0:
        return True
        
    pub_date = video.get("publication_date")
    
    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å,
    # –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if not pub_date:
        # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –∏–º–µ–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ URL, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–º
        return bool(video.get("title") and video.get("url"))
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ - –æ–±—ä–µ–∫—Ç datetime
    if not isinstance(pub_date, datetime):
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–æ –≤–∏–¥–µ–æ –∏–º–µ–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ URL,
        # —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–º
        return bool(video.get("title") and video.get("url"))
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–∞—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    days_diff = (datetime.now() - pub_date).days
    
    return days_diff <= days_limit

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
def filter_by_views(video: Dict[str, Any], min_views: int) -> bool:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –≤–∏–¥–µ–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.
    
    Args:
        video (Dict[str, Any]): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ.
        min_views (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.
        
    Returns:
        bool: True, –µ—Å–ª–∏ —É –≤–∏–¥–µ–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –∏–Ω–∞—á–µ False.
    """
    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ
    if min_views <= 0:
        return True
        
    views = video.get("views", 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    if not isinstance(views, (int, float)):
        try:
            views = int(views)
        except (ValueError, TypeError):
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ,
            # –Ω–æ –≤–∏–¥–µ–æ –∏–º–µ–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ URL, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–º
            return bool(video.get("title") and video.get("url"))
    
    return views >= min_views

@st.cache_data(ttl=3600, show_spinner=False)
def get_video_data(url: str, _youtube_analyzer: YouTubeAnalyzer, max_retries: int = 2, cached_data: Dict = None) -> Dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    
    Args:
        url: URL –≤–∏–¥–µ–æ
        _youtube_analyzer: –≠–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ YouTube (–Ω–µ –∫—ç—à–∏—Ä—É–µ—Ç—Å—è)
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        cached_data: –°–ª–æ–≤–∞—Ä—å —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
    Returns:
        Dict: –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
    if not url or not isinstance(url, str) or "youtube.com/watch" not in url and "youtu.be/" not in url:
        logger.warning(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π URL –≤–∏–¥–µ–æ: {url}")
        return {
            "url": url,
            "title": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π URL",
            "views": 0,
            "publication_date": "01.01.2000",
            "channel_name": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if cached_data and url in cached_data:
        logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {url}")
        return cached_data[url]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    for attempt in range(max_retries):
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries} –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ: {url}")
            video_data = _youtube_analyzer.get_video_details(url)
            
            if video_data and video_data.get("title") and video_data["title"] != "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ":
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {url}")
                return video_data
            else:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {url}")
                time.sleep(1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
            time.sleep(1)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
    logger.warning(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {url} –Ω–µ —É–¥–∞–ª–∏—Å—å. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
    return {
        "url": url,
        "title": f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ ({url.split('/')[-1]})",
        "views": 0,
        "publication_date": "01.01.2000",
        "channel_name": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
        "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫"
    }

def process_source_links(links: list, 
                        relevance_filters: dict = None, 
                        use_proxies: bool = True,
                        use_all_proxies: bool = False,
                        google_account: dict = None,
                        prewatch_settings: dict = None,
                        progress_container=None,
                        msg_container=None) -> Tuple[list, list]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
    
    Args:
        links: –°–ø–∏—Å–æ–∫ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        relevance_filters: –§–∏–ª—å—Ç—Ä—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        use_proxies: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –ø—Ä–æ–∫—Å–∏
        use_all_proxies: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –≤—Å–µ –ø—Ä–æ–∫—Å–∏ (–¥–∞–∂–µ –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ)
        google_account: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ Google (email, password)
        prewatch_settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        progress_container: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        msg_container: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Returns:
        Tuple[list, list]: –ö–æ—Ä—Ç–µ–∂ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–µ—Ä–≤–æ–≥–æ –∏ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
    """
    if not links:
        if msg_container:
            msg_container.warning("–ù–µ —É–∫–∞–∑–∞–Ω—ã –∏—Å—Ö–æ–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
        return [], []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ YouTube-—Å—Å—ã–ª–∫–∏
    valid_links = [link.strip() for link in links if is_youtube_link(link.strip())]
    if not valid_links:
        if msg_container:
            msg_container.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö YouTube-—Å—Å—ã–ª–æ–∫")
        return [], []
    
    if msg_container:
        msg_container.info(f"–ù–∞–π–¥–µ–Ω–æ {len(valid_links)} –≤–∞–ª–∏–¥–Ω—ã—Ö YouTube-—Å—Å—ã–ª–æ–∫")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º YouTubeAnalyzer
    try:
        progress_text = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..."
        if progress_container:
            progress_bar = progress_container.progress(0, text=progress_text)
        else:
            progress_bar = None
            
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
        proxies = None
        if use_proxies:
            proxies = get_proxy_list(force_all=use_all_proxies)
            if not proxies and not use_all_proxies:
                if msg_container:
                    msg_container.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.")
                return [], []
        
        yt = YouTubeAnalyzer(proxy=proxies, google_account=google_account)
        
        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–∫–∞–∑–∞–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        if google_account and prewatch_settings and prewatch_settings.get('enabled', False):
            total_videos = prewatch_settings.get('total_videos', 10)
            distribution = prewatch_settings.get('distribution', 'even')
            min_watch_time = prewatch_settings.get('min_watch_time', 15)
            max_watch_time = prewatch_settings.get('max_watch_time', 45)
            like_probability = prewatch_settings.get('like_probability', 0.7)
            watch_percentage = prewatch_settings.get('watch_percentage', 0.3)
            
            if msg_container:
                msg_container.info(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä {total_videos} –≤–∏–¥–µ–æ...")
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            videos_to_watch = []
            
            if distribution == 'even':
                # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ –∫–∞–Ω–∞–ª–∞–º
                videos_per_channel = max(1, total_videos // len(valid_links))
                remaining_videos = total_videos - (videos_per_channel * len(valid_links))
                
                if msg_container:
                    msg_container.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–º–µ—Ä–Ω–æ {videos_per_channel} –≤–∏–¥–µ–æ —Å –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
                
                for link in valid_links:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –∫–∞–Ω–∞–ª
                        if "youtube.com/watch" in link or "youtu.be/" in link:
                            videos_to_watch.append(link)
                        else:
                            # –≠—Ç–æ –∫–∞–Ω–∞–ª, –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ
                            channel_videos = yt.get_last_videos_from_channel(link, limit=videos_per_channel)
                            if channel_videos:
                                videos_to_watch.extend(channel_videos)
                                if msg_container:
                                    msg_container.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(channel_videos)} –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞ {link}")
                    except Exception as e:
                        if msg_container:
                            msg_container.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ —Å {link}: {e}")
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–±—Ä–∞–ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
                if len(videos_to_watch) < total_videos and remaining_videos > 0:
                    # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –≤–∏–¥–µ–æ —Å –ø–µ—Ä–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                    for link in valid_links[:min(3, len(valid_links))]:
                        try:
                            if not ("youtube.com/watch" in link or "youtu.be/" in link):
                                extra_videos = yt.get_last_videos_from_channel(
                                    link, 
                                    limit=videos_per_channel + remaining_videos,
                                    offset=videos_per_channel
                                )
                                if extra_videos:
                                    videos_to_watch.extend(extra_videos[:remaining_videos])
                                    remaining_videos -= len(extra_videos[:remaining_videos])
                                    if remaining_videos <= 0:
                                        break
                        except Exception as e:
                            if msg_container:
                                msg_container.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ: {e}")
            else:
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ
                if msg_container:
                    msg_container.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä {total_videos} —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º")
                
                all_channel_videos = []
                
                for link in valid_links:
                    try:
                        if "youtube.com/watch" in link or "youtu.be/" in link:
                            all_channel_videos.append((link, datetime.now())) # –î–ª—è –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                        else:
                            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ —Å –¥–∞—Ç–∞–º–∏
                            channel_videos = yt.get_last_videos_from_channel(link, limit=min(10, total_videos))
                            if channel_videos:
                                for video_url in channel_videos:
                                    try:
                                        video_info = yt.get_video_details(video_url)
                                        if video_info and 'publish_date' in video_info:
                                            all_channel_videos.append((video_url, video_info['publish_date']))
                                        else:
                                            all_channel_videos.append((video_url, datetime.now()))
                                    except:
                                        all_channel_videos.append((video_url, datetime.now()))
                    except Exception as e:
                        if msg_container:
                            msg_container.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ —Å {link}: {e}")
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
                all_channel_videos.sort(key=lambda x: x[1], reverse=True)
                
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ URL –≤–∏–¥–µ–æ
                videos_to_watch = [video[0] for video in all_channel_videos[:total_videos]]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            if videos_to_watch:
                if msg_container:
                    msg_container.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä {len(videos_to_watch)} –≤–∏–¥–µ–æ...")
                    
                yt.prewatch_videos(
                    videos_to_watch[:total_videos],
                    min_watch_time=min_watch_time,
                    max_watch_time=max_watch_time,
                    like_probability=like_probability,
                    watch_percentage=watch_percentage
                )
                
                if msg_container:
                    msg_container.success(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")
            else:
                if msg_container:
                    msg_container.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        first_level_recommendations = []
        second_level_recommendations = []
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        total_links = len(valid_links)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É
        for i, link in enumerate(valid_links):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                current_progress = (i / total_links)
                progress_text = f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ {i+1}/{total_links}: {link[:50]}..."
                
                if progress_bar:
                    progress_bar.progress(current_progress, text=progress_text)
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ
                if "youtube.com/watch" in link or "youtu.be/" in link:
                    if msg_container:
                        msg_container.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ: {link}")
                        
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
                    rec1 = yt.get_recommended_videos(link, limit=20)
                    
                    if rec1:
                        first_level_recommendations.extend(rec1)
                        if msg_container:
                            msg_container.success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(rec1)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è")
                    else:
                        if msg_container:
                            msg_container.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ: {link}")
                            
                # –ò–Ω–∞—á–µ, —ç—Ç–æ –∫–∞–Ω–∞–ª
                else:
                    if msg_container:
                        msg_container.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞: {link}")
                        
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞
                    videos = yt.get_last_videos_from_channel(link, limit=5)
                    
                    if videos:
                        if msg_container:
                            msg_container.success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(videos)} –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞")
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞
                        for j, video_url in enumerate(videos):
                            rec1 = yt.get_recommended_videos(video_url, limit=20)
                            
                            if rec1:
                                first_level_recommendations.extend(rec1)
                                if msg_container:
                                    msg_container.success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(rec1)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ –≤–∏–¥–µ–æ {j+1}/{len(videos)}")
                            else:
                                if msg_container:
                                    msg_container.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ {j+1}")
                    else:
                        if msg_container:
                            msg_container.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞: {link}")
                
            except Exception as e:
                if msg_container:
                    msg_container.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ {link}: {str(e)}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ {link}: {str(e)}")
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        first_level_recommendations = list(set(first_level_recommendations))
        
        if msg_container:
            msg_container.success(f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(first_level_recommendations)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è, –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        if first_level_recommendations:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_text = "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è..."
            if progress_bar:
                progress_bar.progress(0.7, text=progress_text)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
            sample_size = min(len(first_level_recommendations), 5)
            sample_recommendations = random.sample(first_level_recommendations, sample_size)
            
            if msg_container:
                msg_container.info(f"–í—ã–±—Ä–∞–Ω–æ {sample_size} –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
            for j, rec_url in enumerate(sample_recommendations):
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    if progress_bar:
                        current_progress = 0.7 + (0.3 * (j / sample_size))
                        progress_bar.progress(current_progress, text=f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ 2-–≥–æ —É—Ä–æ–≤–Ω—è {j+1}/{sample_size}")
                    
                    rec2 = yt.get_recommended_videos(rec_url, limit=10)
                    
                    if rec2:
                        second_level_recommendations.extend(rec2)
                        if msg_container:
                            msg_container.success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(rec2)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏–∑ –≤–∏–¥–µ–æ {j+1}/{sample_size}")
                    else:
                        if msg_container:
                            msg_container.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –≤–∏–¥–µ–æ {j+1}")
                            
                except Exception as e:
                    if msg_container:
                        msg_container.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è: {str(e)}")
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è: {str(e)}")
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
            second_level_recommendations = list(set(second_level_recommendations))
            
            # –£–¥–∞–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ
            second_level_recommendations = [url for url in second_level_recommendations if url not in first_level_recommendations]
            
            if msg_container:
                msg_container.success(f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(second_level_recommendations)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if progress_bar:
            progress_bar.progress(1.0, text="–ó–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
        try:
            yt.close()
        except:
            pass
        
        return first_level_recommendations, second_level_recommendations
            
    except Exception as e:
        if msg_container:
            msg_container.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            msg_container.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä–∞ Chrome –∏ –¥—Ä–∞–π–≤–µ—Ä–∞ chromedriver.")
            
            driver_status = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä"
            proxy_status = "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–∫—Å–∏" if use_proxies else "‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã"
            
            msg_container.error(f"""
            **–°—Ç–∞—Ç—É—Å –¥—Ä–∞–π–≤–µ—Ä–∞:** {driver_status}
            **–°—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏:** {proxy_status}
            
            **–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:**
            ```
            {str(e)}
            ```
            """)
            
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        return [], []

def check_video_relevance(
    llm_analyzer: LLMAnalyzer,
    videos: List[Dict[str, Any]],
    reference_topics: List[str],
    relevance_temp: float
) -> List[Dict[str, Any]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ç–µ–º.
    
    Args:
        llm_analyzer (LLMAnalyzer): –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä LLM.
        videos (List[Dict[str, Any]]): –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
        reference_topics (List[str]): –°–ø–∏—Å–æ–∫ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ç–µ–º.
        relevance_temp (float): –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.
        
    Returns:
        List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ.
    """
    relevant_videos = []
    
    for video in videos:
        if not video.get("title"):
            continue
            
        relevance_result = llm_analyzer.check_relevance(
            video["title"],
            reference_topics,
            temperature=relevance_temp
        )
        
        video["relevance_score"] = relevance_result.get("score", 0.0)
        video["relevance_explanation"] = relevance_result.get("explanation", "")
        
        if relevance_result.get("relevant", True):
            relevant_videos.append(video)
            
    return relevant_videos

def extract_thumbnail_text(
    llm_analyzer: LLMAnalyzer,
    youtube_analyzer: YouTubeAnalyzer,
    videos: List[Dict[str, Any]]
) -> List[Dict[str, Any]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –º–∏–Ω–∏–∞—Ç—é—Ä –≤–∏–¥–µ–æ.
    
    Args:
        llm_analyzer (LLMAnalyzer): –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä LLM.
        youtube_analyzer (YouTubeAnalyzer): –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä YouTube.
        videos (List[Dict[str, Any]]): –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ.
        
    Returns:
        List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.
    """
    for video in videos:
        if not video.get("thumbnail_url"):
            video["thumbnail_text"] = ""
            continue
            
        thumbnail = youtube_analyzer.download_thumbnail(video["thumbnail_url"])
        
        if thumbnail:
            video["thumbnail_text"] = llm_analyzer.extract_text_from_thumbnail(thumbnail)
        else:
            video["thumbnail_text"] = ""
            
    return videos

def create_results_dataframe(videos: List[Dict[str, Any]]) -> pd.DataFrame:
    """
    –°–æ–∑–¥–∞–µ—Ç DataFrame –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ.
    
    Args:
        videos (List[Dict[str, Any]]): –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ.
        
    Returns:
        pd.DataFrame: DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
    """
    if not videos:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
        return pd.DataFrame(columns=[
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ", "URL", "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", 
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", "–ò—Å—Ç–æ—á–Ω–∏–∫", 
            "–û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏", "–¢–µ–∫—Å—Ç –∏–∑ Thumbnail"
        ])
        
    data = []
    
    for video in videos:
        source_type = video.get("source_type", "unknown")
        if source_type == "channel" or source_type == "direct_link":
            source = "–ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫"
        elif source_type == "recommendation_level_1":
            source = "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ 1–≥–æ —É—Ä–æ–≤–Ω—è"
        elif source_type == "recommendation_level_2":
            source = "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ 2–≥–æ —É—Ä–æ–≤–Ω—è"
        else:
            source = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
        pub_date = video.get("publication_date")
        if pub_date and isinstance(pub_date, datetime):
            formatted_date = pub_date.strftime("%Y-%m-%d %H:%M")
        else:
            formatted_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
        data.append({
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ": video.get("title", "–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞"),
            "URL": video.get("url", ""),
            "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏": formatted_date,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤": video.get("views", 0),
            "–ò—Å—Ç–æ—á–Ω–∏–∫": source,
            "–û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏": video.get("relevance_score", 0.0),
            "–¢–µ–∫—Å—Ç –∏–∑ Thumbnail": video.get("thumbnail_text", "")
        })
        
    # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    df = pd.DataFrame(data)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É DataFrame –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–°–æ–∑–¥–∞–Ω DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: {df.columns.tolist()}")
    logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ DataFrame: {len(df)}")
    
    return df

def check_proxies() -> List[Dict[str, str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤.
    
    Returns:
        List[Dict[str, str]]: –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏.
    """
    working_proxies = []
    all_proxies = get_proxy_list()
    
    if not all_proxies:
        st.warning("–í –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞. –†–∞–±–æ—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–∞, –Ω–æ –≤–µ—Ä–æ—è—Ç–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ YouTube.")
        return []
    
    st.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {len(all_proxies)} –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤...")
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    check_details = st.empty()
    proxy_details = []
    
    for i, proxy in enumerate(all_proxies):
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_value = float(i) / len(all_proxies)
            progress_bar.progress(progress_value)
            status_text.text(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏ {proxy['server']}...")
            
            # –§–æ—Ä–º–∞—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
            proxy_info = f"–ü—Ä–æ–∫—Å–∏ {proxy['server']}, –ª–æ–≥–∏–Ω: {proxy.get('username', '–Ω–µ—Ç')}"
            proxy_details.append(proxy_info)
            check_details.text("\n".join(proxy_details + ["–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞..."]))
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é check_proxy –∏–∑ youtube_scraper.py
            proxy_string = f"{proxy['server'].split(':')[0]}:{proxy['server'].split(':')[1]}:{proxy['username']}:{proxy['password']}"
            is_working, message = check_proxy(proxy_string)
            
            if is_working:
                working_proxies.append(proxy)
                proxy_details[-1] = f"{proxy_info} - –†–ê–ë–û–¢–ê–ï–¢! ({message})"
                st.success(f"–ü—Ä–æ–∫—Å–∏ {proxy['server']} —Ä–∞–±–æ—Ç–∞–µ—Ç! {message}")
            else:
                proxy_details[-1] = f"{proxy_info} - –ù–ï –†–ê–ë–û–¢–ê–ï–¢: {message}"
                st.error(f"–ü—Ä–æ–∫—Å–∏ {proxy['server']} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {message}")
                
        except Exception as e:
            logger.error(f"–ü—Ä–æ–∫—Å–∏ {proxy['server']} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
            proxy_details[-1] = f"{proxy_info} - –û–®–ò–ë–ö–ê: {str(e)[:50]}..."
            st.error(f"–ü—Ä–æ–∫—Å–∏ {proxy['server']} –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É: {str(e)[:100]}...")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_bar.progress(1.0)
    status_text.empty()
    
    if not working_proxies:
        # –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
        st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        option_cols = st.columns(2)
        with option_cols[0]:
            if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ –≤—Å–µ–º–∏ –ø—Ä–æ–∫—Å–∏"):
                all_proxies = get_proxy_list()
                if all_proxies:
                    st.session_state.working_proxies = all_proxies
                    st.success(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ {len(all_proxies)} –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—ã")
        with option_cols[1]:
            if st.button("–†–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø—Ä–æ–∫—Å–∏"):
                st.session_state.use_proxy = False
                st.warning("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–±–æ—Ç—É –±–µ–∑ –ø—Ä–æ–∫—Å–∏. YouTube –º–æ–∂–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø.")
    else:
        st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(working_proxies)} —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏ –∏–∑ {len(all_proxies)}")
        
    return working_proxies

def process_youtube_channels(youtube_urls, proxies=None, max_videos=5, sections=None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ YouTube –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    Args:
        youtube_urls (list): –°–ø–∏—Å–æ–∫ URL-–∞–¥—Ä–µ—Å–æ–≤ –∫–∞–Ω–∞–ª–æ–≤ YouTube
        proxies (list, optional): –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        max_videos (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        sections (list, optional): –†–∞–∑–¥–µ–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (videos, shorts –∏ —Ç.–¥.)
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–æ–≤
    """
    logger.info(f"–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ {len(youtube_urls)} YouTube –∫–∞–Ω–∞–ª–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º YouTube —Å–∫—Ä–∞–ø–µ—Ä —Å –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
    try:
        youtube_analyzer = None
        if proxies:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
            for proxy in proxies:
                try:
                    logger.info(f"–ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏: {proxy}")
                    youtube_analyzer = YouTubeAnalyzer(proxy=proxy)
                    if youtube_analyzer and youtube_analyzer.driver:
                        logger.info(f"–£—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥—Ä–∞–π–≤–µ—Ä —Å –ø—Ä–æ–∫—Å–∏: {proxy}")
                        break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–æ–∫—Å–∏ {proxy}: {e}")
                    if youtube_analyzer:
                        youtube_analyzer.close_driver()
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –ø—Ä–æ–∫—Å–∏, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–∏—Ö
        if not youtube_analyzer or not youtube_analyzer.driver:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –ø—Ä–æ–∫—Å–∏, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
            youtube_analyzer = YouTubeAnalyzer()
            
        # –ï—Å–ª–∏ –¥–∞–∂–µ –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        if not youtube_analyzer or not youtube_analyzer.driver:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å YouTube –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")
            return {
                "success": False,
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ YouTube",
                "channels_processed": 0,
                "channels": []
            }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        results = youtube_analyzer.process_channels(
            channel_urls=youtube_urls,
            max_videos=max_videos,
            sections=sections
        )
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        youtube_analyzer.close_driver()
        
        return results
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ YouTube –∫–∞–Ω–∞–ª–æ–≤: {e}")
        traceback.print_exc()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if youtube_analyzer:
            youtube_analyzer.close_driver()
            
        return {
            "success": False,
            "error": str(e),
            "channels_processed": 0,
            "channels": []
        }

def test_recommendations(source_links: List[str], 
                         google_account: Dict[str, str] = None, 
                         prewatch_settings: Dict[str, Any] = None,
                         channel_videos_limit: int = 5,
                         recommendations_per_video: int = 5,
                         existing_analyzer: YouTubeAnalyzer = None) -> pd.DataFrame:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.
    
    Args:
        source_links (List[str]): –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ/–∫–∞–Ω–∞–ª—ã YouTube
        google_account (Dict[str, str], optional): –ê–∫–∫–∞—É–Ω—Ç Google –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        prewatch_settings (Dict[str, Any], optional): –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        channel_videos_limit (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞
        recommendations_per_video (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
        existing_analyzer (YouTubeAnalyzer, optional): –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        
    Returns:
        pd.DataFrame: –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    results = []
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
    if existing_analyzer and existing_analyzer.driver:
        youtube_analyzer = existing_analyzer
        status_text.text("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –±—Ä–∞—É–∑–µ—Ä–∞...")
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ YouTube")
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä YouTube
        status_text.text("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞...")
        youtube_analyzer = YouTubeAnalyzer(headless=True, use_proxy=False, google_account=google_account)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä–∞–π–≤–µ—Ä
        youtube_analyzer.setup_driver()
        
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –¥—Ä–∞–π–≤–µ—Ä
        if youtube_analyzer.driver is None:
            status_text.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
            return pd.DataFrame()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏ YouTube
        valid_links = [link.strip() for link in source_links if "youtube.com" in link or "youtu.be" in link]
        
        if not valid_links:
            status_text.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ YouTube. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫.")
            return pd.DataFrame()
            
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä, –≤—ã–ø–æ–ª–Ω—è–µ–º –µ–≥–æ
        if prewatch_settings and prewatch_settings.get("enabled", False):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            total_videos = prewatch_settings.get("total_videos", 20)
            distribution = prewatch_settings.get("distribution", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º")
            min_watch_time = prewatch_settings.get("min_watch_time", 15)
            max_watch_time = prewatch_settings.get("max_watch_time", 45)
            like_probability = prewatch_settings.get("like_probability", 0.7)
            watch_percentage = prewatch_settings.get("watch_percentage", 0.3)
            
            # –í—ã–±–∏—Ä–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            videos_to_watch = []
            channel_counts = {}  # –î–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ —Å –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            
            status_text.text("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É –≤–∏–¥–µ–æ...")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–æ–≤
            all_channel_videos = []
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–µ –∏ —Å–æ–±–∏—Ä–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            for link in valid_links:
                url, is_channel = parse_youtube_url(link)
                
                if is_channel:
                    # –î–ª—è –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ
                    channel_videos = youtube_analyzer.get_last_videos_from_channel(url, limit=10)  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –≤–∏–¥–µ–æ –¥–ª—è –≤—ã–±–æ—Ä–∞
                    if channel_videos:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –∏ –µ–≥–æ –≤–∏–¥–µ–æ
                        all_channel_videos.append({
                            "channel_url": url,
                            "videos": channel_videos
                        })
                else:
                    # –î–ª—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                    videos_to_watch.append(url)
            
            # –í—ã–±–∏—Ä–∞–µ–º –≤–∏–¥–µ–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if distribution == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º" and all_channel_videos:
                # –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å —Å –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                videos_per_channel = total_videos // len(all_channel_videos)
                remaining_videos = total_videos - (videos_per_channel * len(all_channel_videos))
                
                status_text.text(f"–†–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä: –ø–æ {videos_per_channel} –≤–∏–¥–µ–æ —Å –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ({len(all_channel_videos)} –∫–∞–Ω–∞–ª–æ–≤)")
                
                # –ë–µ—Ä–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ —Å –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                for channel_data in all_channel_videos:
                    channel_videos = channel_data["videos"]
                    # –ë–µ—Ä–µ–º –Ω–µ –±–æ–ª–µ–µ videos_per_channel –≤–∏–¥–µ–æ —Å —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                    for i, video in enumerate(channel_videos):
                        if i < videos_per_channel:
                            videos_to_watch.append(video.get("url"))
                    
                    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å "–ª–∏—à–Ω–∏–µ" –≤–∏–¥–µ–æ, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ö –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –∫–∞–Ω–∞–ª
                    if remaining_videos > 0:
                        for i, channel_data in enumerate(all_channel_videos):
                            if i >= remaining_videos:
                                break
                            # –ë–µ—Ä–µ–º –µ—â–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                            channel_videos = channel_data["videos"]
                            if len(channel_videos) > videos_per_channel:
                                videos_to_watch.append(channel_videos[videos_per_channel].get("url"))
            else:  # "–¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –≤–∏–¥–µ–æ"
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
                all_videos = []
                for channel_data in all_channel_videos:
                    all_videos.extend(channel_data["videos"])
                
                # –ë–µ—Ä–µ–º total_videos —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö –≤–∏–¥–µ–æ
                for i, video in enumerate(all_videos):
                    if i < total_videos:
                        videos_to_watch.append(video.get("url"))
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            if videos_to_watch:
                status_text.text(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä {len(videos_to_watch)} –≤–∏–¥–µ–æ...")
                
                # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç None –∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                videos_to_watch = [url for url in videos_to_watch if url]
                videos_to_watch = list(dict.fromkeys(videos_to_watch))  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
                
                # –í—ã–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                youtube_analyzer.prewatch_videos(
                    videos_to_watch[:total_videos],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
                    min_watch_time=min_watch_time,
                    max_watch_time=max_watch_time,
                    like_probability=like_probability,
                    watch_percentage=watch_percentage
                )
                status_text.text("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
            else:
                status_text.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        
        status_text.text(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(valid_links)} —Å—Å—ã–ª–æ–∫...")
        
        for i, link in enumerate(valid_links):
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_value = float(i) / len(valid_links)
            progress_bar.progress(progress_value)
            status_text.text(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É {i+1} –∏–∑ {len(valid_links)}: {link}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏ (–∫–∞–Ω–∞–ª –∏–ª–∏ –≤–∏–¥–µ–æ)
            url, is_channel = parse_youtube_url(link)
            
            if is_channel:
                # –î–ª—è –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º channel_videos_limit)
                status_text.text(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞: {url}")
                channel_videos = youtube_analyzer.get_last_videos_from_channel(url, limit=channel_videos_limit)
                
                if not channel_videos:
                    status_text.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞ {url}")
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞
                for video_info in channel_videos:
                    video_url = video_info.get("url")
                    if not video_url:
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤–∏–¥–µ–æ
                    status_text.text(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≤–∏–¥–µ–æ: {video_url}")
                    video_data = youtube_analyzer.get_video_details(video_url)
                    
                    if video_data:
                        video_data["source"] = f"–ö–∞–Ω–∞–ª: {link}"
                        results.append(video_data)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º recommendations_per_video)
                    status_text.text(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ: {video_url}")
                    recommendations = youtube_analyzer.get_recommended_videos(video_url, limit=recommendations_per_video)
                    
                    for rec_info in recommendations:
                        rec_url = rec_info.get("url")
                        if not rec_url:
                            continue
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
                        rec_data = youtube_analyzer.get_video_details(rec_url)
                        
                        if rec_data:
                            rec_data["source"] = f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è: {video_url}"
                            results.append(rec_data)
            else:
                # –î–ª—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ
                status_text.text(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≤–∏–¥–µ–æ: {url}")
                video_data = youtube_analyzer.get_video_details(url)
                
                if video_data:
                    video_data["source"] = f"–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {link}"
                    results.append(video_data)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º recommendations_per_video)
                status_text.text(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ: {url}")
                recommendations = youtube_analyzer.get_recommended_videos(url, limit=recommendations_per_video)
                
                for rec_info in recommendations:
                    rec_url = rec_info.get("url")
                    if not rec_url:
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
                    rec_data = youtube_analyzer.get_video_details(rec_url)
                    
                    if rec_data:
                        rec_data["source"] = f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è: {url}"
                        results.append(rec_data)
            
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_bar.progress(1.0)
        status_text.text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        status_text.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        traceback.print_exc()
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
        if youtube_analyzer:
            youtube_analyzer.quit_driver()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if results:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
        df = pd.DataFrame(results)
        
        # –í—ã–±–∏—Ä–∞–µ–º –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        columns_to_show = {
            "url": "–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ",
            "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ",
            "publication_date": "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            "views": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
            "source": "–ò—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ"
        }
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        existing_columns = {k: v for k, v in columns_to_show.items() if k in df.columns}
        
        if existing_columns:
            df = df[list(existing_columns.keys())]
            df = df.rename(columns=existing_columns)
            return df
        else:
            return pd.DataFrame()
    else:
        return pd.DataFrame()

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
    setup_logging()
    st.title("YouTube Researcher üé¨")

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ß–∞—Å—Ç—å 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
        with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏", expanded=True):
            use_proxy = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏", value=False)
            
            proxy_option = st.radio(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–∫—Å–∏:",
                options=["–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞", "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"],
                index=0,
                disabled=not use_proxy
            )
            
            proxy_list = []
            
            if proxy_option == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞" and use_proxy:
                proxy_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–æ–∫—Å–∏ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)", type=["txt"])
                
                if proxy_file:
                    proxy_content = proxy_file.read().decode("utf-8")
                    proxy_list = [line.strip() for line in proxy_content.split("\n") if line.strip()]
                    st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(proxy_list)} –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞.")
                    
                    # –û–ø—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏
                    check_proxies = st.checkbox("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏", value=True)
                    
                    if check_proxies and st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∫—Å–∏"):
                        with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏..."):
                            working_proxies = check_proxies_availability(proxy_list)
                            
                            if working_proxies:
                                st.success(f"–†–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏: {len(working_proxies)} –∏–∑ {len(proxy_list)}")
                                proxy_list = working_proxies
                            else:
                                st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏!")
                                
                                # –û–ø—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
                                force_use_all = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏")
                                if force_use_all:
                                    st.warning(f"–ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ {len(proxy_list)} –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
                                else:
                                    proxy_list = []
            
            elif proxy_option == "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é" and use_proxy:
                proxy_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)", height=100)
                
                if proxy_input:
                    proxy_list = [line.strip() for line in proxy_input.split("\n") if line.strip()]
                    st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(proxy_list)} –ø—Ä–æ–∫—Å–∏.")
                    
                    # –û–ø—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏
                    check_proxies = st.checkbox("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏", value=True)
                    
                    if check_proxies and st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∫—Å–∏"):
                        with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏..."):
                            working_proxies = check_proxies_availability(proxy_list)
                            
                            if working_proxies:
                                st.success(f"–†–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏: {len(working_proxies)} –∏–∑ {len(proxy_list)}")
                                proxy_list = working_proxies
                            else:
                                st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏!")
                                
                                # –û–ø—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
                                force_use_all = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏")
                                if force_use_all:
                                    st.warning(f"–ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ {len(proxy_list)} –ø—Ä–æ–∫—Å–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
                                else:
                                    proxy_list = []
        
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    tab1, tab2, tab3 = st.tabs(["–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"])
    
    with tab1:
        # –°—Ç–∞–¥–∏—è 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        st.header("–°—Ç–∞–¥–∏—è 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ Google
        with st.expander("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google", expanded=True):
            use_google_account = st.checkbox("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç–µ Google", value=False)
            google_account = None
            
            if use_google_account:
                col1, col2 = st.columns(2)
                with col1:
                    email = st.text_input("Email –∞–∫–∫–∞—É–Ω—Ç–∞ Google", key="google_email")
                with col2:
                    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="google_password")
                
                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
                if email and password:
                    google_account = {
                        "email": email,
                        "password": password
                    }
                
                # –û—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                auth_col1, auth_col2 = st.columns([1, 2])
                with auth_col1:
                    auth_button = st.button("üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Google")
                
                with auth_col2:
                    auth_status = st.empty()
                    if st.session_state.get("is_logged_in", False):
                        auth_status.success(f"‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ {st.session_state.get('google_account', {}).get('email', '')}")

                if auth_button:
                    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google..."):
                        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä YouTube —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                        auth_analyzer = YouTubeAnalyzer(
                            headless=False,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏–¥–∏–º—ã–π —Ä–µ–∂–∏–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            use_proxy=use_proxy,
                            google_account=google_account
                        )
                        
                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä–∞–π–≤–µ—Ä
                        auth_analyzer.setup_driver()
                        
                        if auth_analyzer.driver:
                            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                            success = auth_analyzer.login_to_google()
                            
                            if success or auth_analyzer.is_logged_in:
                                st.session_state.google_account = google_account
                                st.session_state.is_logged_in = True
                                st.session_state.auth_analyzer = auth_analyzer
                                auth_status.success(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! ({email})")
                            else:
                                auth_status.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ Google. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞.")
                                
                                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏
                                try:
                                    auth_analyzer.quit_driver()
                                except:
                                    pass
                        else:
                            auth_status.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            else:
                st.info("–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ Google –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            st.info("""
            ‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:
            - –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            - –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            - –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏ —Å–µ—Å—Å–∏–∏ –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
            """)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", expanded=True):
            enable_prewatch = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ", value=False)
            prewatch_settings = None
            
            if enable_prewatch:
                col1, col2 = st.columns(2)
                with col1:
                    total_videos = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", min_value=1, max_value=100, value=20)
                    distribution = st.radio(
                        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                        options=["–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º", "–¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –≤–∏–¥–µ–æ"],
                        index=0
                    )
                with col2:
                    min_watch_time = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (—Å–µ–∫)", min_value=5, max_value=60, value=15)
                    max_watch_time = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (—Å–µ–∫)", min_value=min_watch_time, max_value=120, value=45)
                    like_probability = st.slider("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ª–∞–π–∫–∞ (0-1)", min_value=0.0, max_value=1.0, value=0.7, step=0.1)
                    watch_percentage = st.slider("–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ (0-1)", min_value=0.1, max_value=1.0, value=0.3, step=0.1)
                
                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                prewatch_settings = {
                    "enabled": enable_prewatch,
                    "total_videos": total_videos,
                    "distribution": distribution,
                    "min_watch_time": min_watch_time,
                    "max_watch_time": max_watch_time,
                    "like_probability": like_probability,
                    "watch_percentage": watch_percentage
                }
                
                # –û—Ç–¥–µ–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
                st.subheader("–ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                if not st.session_state.get("is_logged_in", False):
                    st.warning("‚ö†Ô∏è –î–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Google –∞–∫–∫–∞—É–Ω—Ç–µ")
                else:
                    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                    prewatch_links = st.text_area(
                        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)",
                        height=100
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —Ä–∞–≤–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                    method_col1, method_col2 = st.columns([1, 1])
                    
                    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö
                    with method_col1:
                        auto_method = st.button("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä", key="auto_method", help="–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä (YouTube –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥)")
                    
                    with method_col2:
                        manual_method = st.button("üë§ –†—É—á–Ω–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", key="manual_method", help="–°–æ–∑–¥–∞–µ—Ç HTML —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ –≤ —Å–≤–æ–µ–º –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ")
                    
                    # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    prewatch_status = st.empty()
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†—É—á–Ω–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä"
                    if manual_method:
                        if not prewatch_links.strip():
                            prewatch_status.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
                        else:
                            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫
                            video_links = [link.strip() for link in prewatch_links.split("\n") if link.strip()]
                            valid_links = [link for link in video_links if "youtube.com" in link or "youtu.be" in link]
                            
                            if not valid_links:
                                prewatch_status.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ YouTube. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫.")
                            else:
                                prewatch_status.info(f"‚è≥ –°–æ–∑–¥–∞–µ–º HTML —Ñ–∞–π–ª –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ {len(valid_links)} –≤–∏–¥–µ–æ...")
                                
                                try:
                                    # –°–æ–∑–¥–∞–µ–º HTML —Ñ–∞–π–ª –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                                    html_content = create_manual_viewing_html(valid_links[:total_videos], 
                                                                        min_watch_time, max_watch_time)
                                    
                                    # –ö–æ–¥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ base64 –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                                    b64 = base64.b64encode(html_content.encode()).decode()
                                    
                                    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏–º –µ—ë
                                    download_html = f'<a href="data:text/html;base64,{b64}" download="youtube_videos_to_watch.html"><button style="background-color: #4CAF50; color: white; padding: 12px 20px; border: none; border-radius: 4px; cursor: pointer; font-size: 16px;">‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å HTML —Ñ–∞–π–ª —Å –≤–∏–¥–µ–æ</button></a>'
                                    
                                    prewatch_status.success(f"‚úÖ HTML —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ {len(valid_links[:total_videos])} –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤!")
                                    st.markdown(download_html, unsafe_allow_html=True)
                                    
                                    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
                                    st.info("""
                                    ### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:
                                    1. –°–∫–∞—á–∞–π—Ç–µ HTML —Ñ–∞–π–ª –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã—à–µ
                                    2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –≥–¥–µ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ YouTube
                                    3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä" –≤ HTML —Ñ–∞–π–ª–µ
                                    4. –ë—Ä–∞—É–∑–µ—Ä –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ –æ–¥–Ω–æ –∑–∞ –¥—Ä—É–≥–∏–º
                                    5. –ö–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                                    6. –ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ YouTube
                                    
                                    ‚ö†Ô∏è **–í–∞–∂–Ω–æ**: –ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–∏–¥–µ–æ.
                                    """)
                                except Exception as e:
                                    prewatch_status.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTML —Ñ–∞–π–ª–∞: {str(e)}")
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä"
                    if auto_method:
                        if not prewatch_links.strip():
                            prewatch_status.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
                        else:
                            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫
                            video_links = [link.strip() for link in prewatch_links.split("\n") if link.strip()]
                            valid_links = [link for link in video_links if "youtube.com" in link or "youtu.be" in link]
                            
                            if not valid_links:
                                prewatch_status.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ YouTube. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫.")
                            else:
                                try:
                                    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä YouTube
                                    existing_analyzer = st.session_state.get("auth_analyzer")
                                    
                                    if existing_analyzer and existing_analyzer.driver:
                                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                                        prewatch_status.info(f"‚è≥ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ {len(valid_links[:total_videos])} –≤–∏–¥–µ–æ...")
                                        
                                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∏–º—ã–π —Ä–µ–∂–∏–º
                                        existing_analyzer.headless = False
                                        
                                        existing_analyzer.prewatch_videos(
                                            valid_links[:total_videos],
                                            min_watch_time=min_watch_time,
                                            max_watch_time=max_watch_time,
                                            like_probability=like_probability,
                                            watch_percentage=watch_percentage
                                        )
                                        prewatch_status.success(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ {len(valid_links[:total_videos])} –≤–∏–¥–µ–æ.")
                                        prewatch_status.warning("‚ö†Ô∏è –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ YouTube, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
                                    else:
                                        prewatch_status.error("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.")
                                except Exception as e:
                                    prewatch_status.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ: {str(e)}")
        
        # –°—Ç–∞–¥–∏—è 2: –°–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        st.header("–°—Ç–∞–¥–∏—è 2: –°–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        with st.expander("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö", expanded=True):
            source_option = st.radio(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Å—ã–ª–æ–∫:",
                options=["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞"],
                index=0
            )
            
            source_links = []
            
            if source_option == "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
                source_input = st.text_area(
                    "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –∫–∞–Ω–∞–ª—ã YouTube (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)",
                    height=150
                )
                
                if source_input:
                    source_links = [line.strip() for line in source_input.split("\n") if line.strip()]
            else:  # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
                source_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)", type=["txt"])
                
                if source_file:
                    source_content = source_file.read().decode("utf-8")
                    source_links = [line.strip() for line in source_content.split("\n") if line.strip()]
            
            if source_links:
                st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(source_links)} —Å—Å—ã–ª–æ–∫.")
                
                # –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä —Å—Å—ã–ª–æ–∫ (–Ω–µ –±–æ–ª–µ–µ 5)
                if len(source_links) > 0:
                    st.write("–ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:")
                    for i, link in enumerate(source_links[:5]):
                        st.write(f"{i+1}. {link}")
                    
                    if len(source_links) > 5:
                        st.write(f"...–∏ –µ—â–µ {len(source_links) - 5} —Å—Å—ã–ª–æ–∫")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã–µ –∏–∑ –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
        with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±–æ—Ä–∞", expanded=True):
            col1, col2 = st.columns(2)
            with col1:
                channel_videos_limit = st.number_input(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞", 
                    min_value=1, 
                    max_value=20, 
                    value=5
                )
            with col2:
                recommendations_per_video = st.number_input(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ", 
                    min_value=1, 
                    max_value=20, 
                    value=5
                )
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if st.button("–°–æ–±—Ä–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
            if source_links:
                with st.spinner("–°–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π..."):
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –¥—Ä–∞–π–≤–µ—Ä
                    existing_analyzer = st.session_state.get("auth_analyzer")
                    
                    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –¥—Ä–∞–π–≤–µ—Ä–æ–º
                    results_df = test_recommendations(
                        source_links, 
                        google_account=google_account, 
                        prewatch_settings=prewatch_settings,
                        channel_videos_limit=channel_videos_limit,
                        recommendations_per_video=recommendations_per_video,
                        existing_analyzer=existing_analyzer  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥—Ä–∞–π–≤–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
                    )
                    
                    if not results_df.empty:
                        st.session_state["results_df"] = results_df
                        st.success(f"–°–æ–±—Ä–∞–Ω–æ {len(results_df)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                        st.dataframe(results_df)
                        
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                        st.info("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å' –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.")
                        # –í—ã–≤–æ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                        st.error("–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
                        st.write("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º")
                        st.write("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)")
                        st.write("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–∞ –∏ —Å–µ—Ç–∏")
            else:
                st.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
    
    with tab2:
        # –°—Ç–∞–¥–∏—è 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        st.header("–°—Ç–∞–¥–∏—è 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏")
        
        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", expanded=True):
            col1, col2 = st.columns(2)
            with col1:
                min_views = st.number_input(
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", 
                    min_value=0, 
                    value=1000, 
                    step=100
                )
            with col2:
                max_days = st.number_input(
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", 
                    min_value=1, 
                    value=30, 
                    step=1
                )
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        with st.expander("–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º", expanded=True):
            search_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤–∏–¥–µ–æ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ)", key="search_query")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if st.button("–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
            if "results_df" in st.session_state and not st.session_state["results_df"].empty:
                df = st.session_state["results_df"].copy()
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
                if "views" in df.columns:
                    df = filter_by_views(df, min_views=min_views)
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                if "publication_date" in df.columns:
                    df = filter_by_date(df, max_days=max_days)
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
                if search_query:
                    df = filter_by_search(df, search_query)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                st.session_state["filtered_df"] = df
                
                if not df.empty:
                    st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(df)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
                    st.dataframe(df)
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    st.info("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞.")
                else:
                    st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
            else:
                st.error("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ.")
    
    with tab3:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        
        if ("filtered_df" in st.session_state and not st.session_state["filtered_df"].empty) or \
           ("results_df" in st.session_state and not st.session_state["results_df"].empty):
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ - –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if "filtered_df" in st.session_state and not st.session_state["filtered_df"].empty:
                display_df = st.session_state["filtered_df"]
                st.success(f"–û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(display_df)} –≤–∏–¥–µ–æ.")
            else:
                display_df = st.session_state["results_df"]
                st.success(f"–û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(display_df)} –≤–∏–¥–µ–æ.")
            
            # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_format = st.radio(
                "–§–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
                options=["–¢–∞–±–ª–∏—Ü–∞", "JSON", "–ö–∞—Ä—Ç–æ—á–∫–∏"],
                index=0
            )
            
            if display_format == "–¢–∞–±–ª–∏—Ü–∞":
                st.dataframe(display_df)
            elif display_format == "JSON":
                st.json(display_df.to_dict(orient="records"))
            else:  # –ö–∞—Ä—Ç–æ—á–∫–∏
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫
                for i, row in display_df.iterrows():
                    with st.expander(f"{row['–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ'] if '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ' in row else '–í–∏–¥–µ–æ ' + str(i+1)}", expanded=False):
                        col1, col2 = st.columns([1, 2])
                        
                        with col1:
                            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–µ
                            if "thumbnail" in row:
                                st.image(row["thumbnail"], use_column_width=True)
                            
                        with col2:
                            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –≤–∏–¥–µ–æ
                            st.write(f"**–°—Å—ã–ª–∫–∞:** [{row['–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ'] if '–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ' in row else ''}]({row['–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ'] if '–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ' in row else ''})")
                            
                            if "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏" in row:
                                st.write(f"**–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:** {row['–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏']}")
                            
                            if "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤" in row:
                                st.write(f"**–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:** {row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤']}")
                            
                            if "–ò—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ" in row:
                                st.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {row['–ò—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ']}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.subheader("–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("–°–∫–∞—á–∞—Ç—å CSV"):
                    csv = display_df.to_csv(index=False)
                    
                    # –ö–æ–¥–∏—Ä—É–µ–º CSV –≤ base64
                    b64 = base64.b64encode(csv.encode()).decode()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    href = f'<a href="data:file/csv;base64,{b64}" download="youtube_results.csv">–°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª</a>'
                    st.markdown(href, unsafe_allow_html=True)
            
            with col2:
                if st.button("–°–∫–∞—á–∞—Ç—å JSON"):
                    json_data = display_df.to_json(orient="records", force_ascii=False)
                    
                    # –ö–æ–¥–∏—Ä—É–µ–º JSON –≤ base64
                    b64 = base64.b64encode(json_data.encode("utf-8")).decode()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    href = f'<a href="data:file/json;base64,{b64}" download="youtube_results.json">–°–∫–∞—á–∞—Ç—å JSON —Ñ–∞–π–ª</a>'
                    st.markdown(href, unsafe_allow_html=True)
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ.")

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML —Ñ–∞–π–ª–∞ —Å —Ä—É—á–Ω—ã–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
def create_manual_viewing_html(video_urls: List[str], min_watch_time: int = 15, max_watch_time: int = 45) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç HTML —Ñ–∞–π–ª –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ YouTube.
    
    Args:
        video_urls: –°–ø–∏—Å–æ–∫ URL –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        min_watch_time: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        max_watch_time: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        str: HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    """
    # –û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫
    valid_urls = []
    for url in video_urls:
        url = url.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–∏–¥–µ–æ
        if "youtube.com/watch" in url or "youtu.be/" in url:
            valid_urls.append(url)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: {url}")
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–Ω–∞–ª, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ —Å –Ω–µ–≥–æ
        elif "youtube.com/channel/" in url or "youtube.com/c/" in url or "youtube.com/user/" in url or "youtube.com/@" in url:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞
            channel_videos_url = url
            if not channel_videos_url.endswith("/videos"):
                channel_videos_url = channel_videos_url.rstrip("/") + "/videos"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞
            valid_urls.append(channel_videos_url)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞: {channel_videos_url}")
            
            try:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä YouTube –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                temp_analyzer = YouTubeAnalyzer(headless=True, use_proxy=False)
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞
                    channel_videos = temp_analyzer.get_last_videos_from_channel(url, limit=5)
                    
                    if channel_videos:
                        for video in channel_videos:
                            if isinstance(video, dict) and 'url' in video:
                                valid_urls.append(video['url'])
                                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞: {video['url']}")
                            elif isinstance(video, str):
                                valid_urls.append(video)
                                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞: {video}")
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(channel_videos)} –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞ {url}")
                finally:
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
                    if temp_analyzer and hasattr(temp_analyzer, 'driver') and temp_analyzer.driver:
                        temp_analyzer.quit_driver()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞ {url}: {str(e)}")
        else:
            logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞: {url} - –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–∞–∫ –≤–∏–¥–µ–æ –∏–ª–∏ –∫–∞–Ω–∞–ª YouTube")
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    valid_urls = list(dict.fromkeys(valid_urls))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    if not valid_urls:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫
        return """
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–û—à–∏–±–∫–∞ - –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –≤–∏–¥–µ–æ</title>
            <style>
                body { font-family: Arial; background: #f0f0f0; padding: 20px; }
                .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); }
                h1 { color: #cc0000; text-align: center; }
                .error { background-color: #fff3cd; color: #856404; padding: 15px; border-radius: 5px; margin: 20px 0; border-left: 5px solid #ffeeba; }
                .info { background-color: #d1ecf1; color: #0c5460; padding: 15px; border-radius: 5px; margin: 20px 0; border-left: 5px solid #bee5eb; }
                .manual-step { background-color: #e8f5e9; color: #1b5e20; padding: 15px; border-radius: 5px; margin: 20px 0; border-left: 5px solid #a5d6a7; }
                .input-section { background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin-top: 20px; }
                textarea { width: 100%; height: 100px; padding: 10px; margin-bottom: 10px; border: 1px solid #ddd; border-radius: 4px; }
                button { background-color: #cc0000; color: white; border: none; padding: 10px 15px; border-radius: 4px; cursor: pointer; font-weight: bold; }
                button:hover { background-color: #aa0000; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>–û—à–∏–±–∫–∞: –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –≤–∏–¥–µ–æ</h1>
                <div class="error">
                    <strong>–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.</strong> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ YouTube.
                </div>
                <div class="info">
                    <p><strong>–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫:</strong></p>
                    <ul>
                        <li>–ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ: https://www.youtube.com/watch?v=XXXXXXXXXXX</li>
                        <li>–ö–æ—Ä–æ—Ç–∫–∏–µ —Å—Å—ã–ª–∫–∏: https://youtu.be/XXXXXXXXXXX</li>
                    </ul>
                    <p>–ò–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π YouTube API, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. 
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∏–¥–µ–æ.</p>
                </div>
                
                <div class="manual-step">
                    <h3>–ö–∞–∫ –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ –≤—Ä—É—á–Ω—É—é:</h3>
                    <ol>
                        <li>–û—Ç–∫—Ä–æ–π—Ç–µ YouTube –∏ –Ω–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫–∞–Ω–∞–ª –∏–ª–∏ –≤–∏–¥–µ–æ</li>
                        <li>–î–ª—è –∫–∞–Ω–∞–ª–∞: –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É "–í–∏–¥–µ–æ"</li>
                        <li>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å</li>
                        <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞</li>
                        <li>–í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –Ω–∏–∂–µ (–ø–æ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–µ –Ω–∞ —Å—Ç—Ä–æ–∫—É)</li>
                    </ol>
                </div>
                
                <div class="input-section">
                    <h3>–î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube –≤–∏–¥–µ–æ:</h3>
                    <form id="videoForm">
                        <textarea id="videoUrls" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube –≤–∏–¥–µ–æ (–ø–æ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–µ –Ω–∞ —Å—Ç—Ä–æ–∫—É)"></textarea>
                        <button type="button" onclick="createWatchPage()">–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</button>
                    </form>
                </div>
            </div>
            
            <script>
                function createWatchPage() {
                    const urlsText = document.getElementById('videoUrls').value;
                    const urlsList = urlsText.split('\\n').filter(url => url.trim() !== '');
                    
                    if (urlsList.length === 0) {
                        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube');
                        return;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫
                    const validUrls = urlsList.filter(url => 
                        url.includes('youtube.com/watch') || 
                        url.includes('youtu.be/')
                    );
                    
                    if (validUrls.length === 0) {
                        alert('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ YouTube. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–æ–∫.');
                        return;
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–∏–¥–µ–æ
                    const videos = validUrls.map(url => {
                        const watchTime = Math.floor(Math.random() * (45 - 15 + 1)) + 15;
                        return { url, watchTime };
                    });
                    
                    // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ
                    let videosListHtml = '';
                    videos.forEach((video, i) => {
                        videosListHtml += `
                        <tr id="video-row-${i}" class="video-row">
                            <td>${i+1}</td>
                            <td><a href="${video.url}" target="_blank">${video.url}</a></td>
                            <td>${video.watchTime} —Å–µ–∫</td>
                            <td class="status">–û–∂–∏–¥–∞–µ—Ç</td>
                        </tr>
                        `;
                    });
                    
                    // –°–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                    const htmlContent = `
                    <!DOCTYPE html>
                    <html lang="ru">
                    <head>
                        <meta charset="UTF-8">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ YouTube –¥–ª—è –æ–±—É—á–µ–Ω–∏—è</title>
                        <style>
                            body {
                                font-family: Arial, sans-serif;
                                line-height: 1.6;
                                margin: 0;
                                padding: 20px;
                                background-color: #f0f0f0;
                            }
                            
                            .container {
                                max-width: 1000px;
                                margin: 0 auto;
                                background: white;
                                padding: 20px;
                                border-radius: 8px;
                                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
                            }
                            
                            h1 {
                                color: #cc0000;
                                text-align: center;
                            }
                            
                            .warning {
                                background-color: #fff3cd;
                                color: #856404;
                                padding: 10px;
                                border-radius: 5px;
                                margin-bottom: 20px;
                                border-left: 5px solid #ffeeba;
                            }
                            
                            .info {
                                background-color: #d1ecf1;
                                color: #0c5460;
                                padding: 10px;
                                border-radius: 5px;
                                margin-bottom: 20px;
                                border-left: 5px solid #bee5eb;
                            }
                            
                            .player-wrapper {
                                display: flex;
                                flex-direction: column;
                                margin-bottom: 20px;
                                background: #000;
                                padding: 10px;
                                border-radius: 5px;
                            }
                            
                            #player {
                                width: 100%;
                                height: 500px;
                                margin-bottom: 10px;
                            }
                            
                            .controls {
                                display: flex;
                                justify-content: space-between;
                                align-items: center;
                                background: #333;
                                color: white;
                                padding: 10px;
                                border-radius: 5px;
                            }
                            
                            .progress {
                                flex-grow: 1;
                                margin: 0 15px;
                                height: 20px;
                                background: #444;
                                border-radius: 10px;
                                overflow: hidden;
                                position: relative;
                            }
                            
                            .progress-bar {
                                height: 100%;
                                width: 0;
                                background: #cc0000;
                                transition: width 0.5s;
                            }
                            
                            .time-display {
                                font-family: monospace;
                                font-size: 16px;
                                margin-right: 10px;
                            }
                            
                            button {
                                background-color: #cc0000;
                                color: white;
                                border: none;
                                padding: 10px 15px;
                                cursor: pointer;
                                border-radius: 4px;
                                font-weight: bold;
                            }
                            
                            button:hover {
                                background-color: #aa0000;
                            }
                            
                            button:disabled {
                                background-color: #cccccc;
                                cursor: not-allowed;
                            }
                            
                            table {
                                width: 100%;
                                border-collapse: collapse;
                                margin-top: 20px;
                            }
                            
                            th, td {
                                padding: 12px;
                                text-align: left;
                                border-bottom: 1px solid #ddd;
                            }
                            
                            th {
                                background-color: #f2f2f2;
                                font-weight: bold;
                            }
                            
                            tr.completed {
                                background-color: #e8f5e9;
                            }
                            
                            tr.playing {
                                background-color: #fff8e1;
                            }
                            
                            td.status {
                                font-weight: bold;
                            }
                            
                            .status-playing {
                                color: #ff9800;
                            }
                            
                            .status-completed {
                                color: #4caf50;
                            }
                            
                            .video-info {
                                background: #f5f5f5;
                                padding: 10px;
                                border-radius: 5px;
                                margin-top: 10px;
                                font-weight: bold;
                            }
                        </style>
                    </head>
                    <body>
                        <div class="container">
                            <h1>–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ YouTube</h1>
                            
                            <div class="warning">
                                <strong>–í–∞–∂–Ω–æ:</strong> –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ YouTube –≤ —Ç–µ–∫—É—â–µ–º –±—Ä–∞—É–∑–µ—Ä–µ.
                                –ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–∏–¥–µ–æ.
                            </div>
                            
                            <div class="info">
                                <p><strong>–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:</strong></p>
                                <ul>
                                    <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ YouTube</li>
                                    <li>–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</li>
                                    <li>–£–ª—É—á—à–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ YouTube –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</li>
                                </ul>
                            </div>
                            
                            <div class="player-wrapper">
                                <div id="player"></div>
                                <div class="controls">
                                    <button id="startButton">‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä</button>
                                    <div class="progress">
                                        <div class="progress-bar" id="progressBar"></div>
                                    </div>
                                    <div class="time-display" id="timeDisplay">00:00 / 00:00</div>
                                    <button id="skipButton" disabled>‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</button>
                                </div>
                            </div>
                            
                            <div class="video-info" id="videoInfo">
                                –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ${videos.length} –≤–∏–¥–µ–æ
                            </div>
                            
                            <table>
                                <thead>
                                    <tr>
                                        <th>‚Ññ</th>
                                        <th>–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ</th>
                                        <th>–í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</th>
                                        <th>–°—Ç–∞—Ç—É—Å</th>
                                    </tr>
                                </thead>
                                <tbody id="videosTable">
                                    ${videosListHtml}
                                </tbody>
                            </table>
                        </div>
                        
                        <script>
                            // –ó–∞–≥—Ä—É–∂–∞–µ–º YouTube API
                            var tag = document.createElement('script');
                            tag.src = "https://www.youtube.com/iframe_api";
                            var firstScriptTag = document.getElementsByTagName('script')[0];
                            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
                            
                            // –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ
                            const videos = [
                                {videos_json}
                            ];
                            
                            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∏–¥–µ–æ
                            if (videos.length === 0) {{
                                document.getElementById('videoInfo').textContent = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞";
                                document.getElementById('startButton').disabled = true;
                                alert("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –î–æ–±–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ YouTube-—Å—Å—ã–ª–∫–∏.");
                            }}
                            
                            // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                            const startButton = document.getElementById('startButton');
                            const skipButton = document.getElementById('skipButton');
                            const progressBar = document.getElementById('progressBar');
                            const timeDisplay = document.getElementById('timeDisplay');
                            const videoInfo = document.getElementById('videoInfo');
                            const videosTable = document.getElementById('videosTable');
                            
                            // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                            let currentVideoIndex = 0;
                            let watching = false;
                            let timer = null;
                            let secondsWatched = 0;
                            let totalWatched = 0;
                            let player;
                            
                            // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –≤–∏–¥–µ–æ –∏–∑ URL YouTube
                            function getYouTubeVideoId(url) {{
                                const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;
                                const match = url.match(regExp);
                                return (match && match[7].length === 11) ? match[7] : false;
                            }}
                            
                            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YouTube –ø–ª–µ–µ—Ä–∞
                            function onYouTubeIframeAPIReady() {{
                                player = new YT.Player('player', {{
                                    height: '500',
                                    width: '100%',
                                    videoId: '',
                                    playerVars: {{
                                        'autoplay': 0,
                                        'controls': 1,
                                        'showinfo': 1,
                                        'rel': 0,
                                        'fs': 1,
                                        'modestbranding': 1
                                    }},
                                    events: {{
                                        'onStateChange': onPlayerStateChange
                                    }}
                                }});
                            }}
                            
                            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–ª–µ–µ—Ä–∞
                            function onPlayerStateChange(event) {{
                                // –ï—Å–ª–∏ –≤–∏–¥–µ–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å —Å–∞–º–æ
                                if (event.data === YT.PlayerState.ENDED) {{
                                    // –í–µ–¥–µ–º —Å–µ–±—è –∫–∞–∫ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                                    clearInterval(timer);
                                    updateVideoStatus(currentVideoIndex, '–ó–∞–≤–µ—Ä—à–µ–Ω–æ');
                                    currentVideoIndex++;
                                    setTimeout(playCurrentVideo, 1500);
                                }}
                            }}
                            
                            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (—Å–µ–∫—É–Ω–¥—ã –≤ MM:SS)
                            function formatTime(seconds) {{
                                const mins = Math.floor(seconds / 60);
                                const secs = Math.floor(seconds % 60);
                                return `${{String(mins).padStart(2, '0')}}:${{String(secs).padStart(2, '0')}}`;
                            }}
                            
                            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–∏–¥–µ–æ
                            function updateProgress() {{
                                const currentVideo = videos[currentVideoIndex];
                                const percent = (secondsWatched / currentVideo.watchTime) * 100;
                                progressBar.style.width = `${{percent}}%`;
                                
                                timeDisplay.textContent = `${{formatTime(secondsWatched)}} / ${{formatTime(currentVideo.watchTime)}}`;
                            }}
                            
                            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ –≤ —Ç–∞–±–ª–∏—Ü–µ
                            function updateVideoStatus(index, status) {{
                                const row = document.getElementById(`video-row-${{index}}`);
                                const statusCell = row.querySelector('.status');
                                
                                if (status === '–ü—Ä–æ—Å–º–æ—Ç—Ä') {{
                                    row.className = 'video-row playing';
                                    statusCell.className = 'status status-playing';
                                    statusCell.textContent = '–ü—Ä–æ—Å–º–æ—Ç—Ä';
                                }} else if (status === '–ó–∞–≤–µ—Ä—à–µ–Ω–æ') {{
                                    row.className = 'video-row completed';
                                    statusCell.className = 'status status-completed';
                                    statusCell.textContent = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
                                    totalWatched++;
                                }}
                            }}
                            
                            // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–µ–æ
                            function playCurrentVideo() {{
                                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–µ–æ
                                if (currentVideoIndex >= videos.length) {{
                                    stopWatching();
                                    videoInfo.textContent = `–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ ${{totalWatched}} –∏–∑ ${{videos.length}} –≤–∏–¥–µ–æ.`;
                                    alert('–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
                                    return;
                                }}
                                
                                const currentVideo = videos[currentVideoIndex];
                                const videoId = getYouTubeVideoId(currentVideo.url);
                                
                                if (!videoId) {{
                                    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –≤–∏–¥–µ–æ –¥–ª—è:', currentVideo.url);
                                    currentVideoIndex++;
                                    playCurrentVideo();
                                    return;
                                }}
                                
                                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                                videoInfo.textContent = `–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ ${{currentVideoIndex + 1}} –∏–∑ ${{videos.length}}: ${{currentVideo.url}}`;
                                
                                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                                updateVideoStatus(currentVideoIndex, '–ü—Ä–æ—Å–º–æ—Ç—Ä');
                                
                                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                                secondsWatched = 0;
                                updateProgress();
                                
                                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é API
                                if (player && player.loadVideoById) {{
                                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                                    player.loadVideoById({{
                                        'videoId': videoId,
                                        'startSeconds': 0,
                                        'suggestedQuality': 'large'
                                    }});
                                    player.playVideo();
                                    
                                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                                    setTimeout(function() {{
                                        player.setVolume(50);
                                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
                                        player.playVideo();
                                    }}, 1000);
                                }}
                                
                                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
                                if (timer) {{
                                    clearInterval(timer);
                                }}
                                
                                timer = setInterval(() => {{
                                    secondsWatched++;
                                    updateProgress();
                                    
                                    // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                                    if (secondsWatched >= currentVideo.watchTime) {{
                                        // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
                                        updateVideoStatus(currentVideoIndex, '–ó–∞–≤–µ—Ä—à–µ–Ω–æ');
                                        
                                        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                                        currentVideoIndex++;
                                        
                                        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                                        clearInterval(timer);
                                        
                                        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–∏–¥–µ–æ
                                        setTimeout(playCurrentVideo, 1500);
                                    }}
                                }}, 1000);
                                
                                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                                if (secondsWatched === 0) {{
                                    // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                                    // –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
                                    const newTab = window.open(currentVideo.url, '_blank');
                                    
                                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                    videoInfo.innerHTML = '<div class="warning">' +
                                        '<strong style="color: #ff9800;">‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!</strong> –û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ —Å –≤–∏–¥–µ–æ ' + (currentVideoIndex + 1) + '/' + videos.length + '.<br>' +
                                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –æ—Ç–∫—Ä—ã—Ç—É—é –≤–∫–ª–∞–¥–∫—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∏–∫–æ–º.<br>' +
                                        '–≠—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ó–∞–∫—Ä–æ–π—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.<br>' +
                                        '<span style="color: #4caf50;">‚úì –í–∏–¥–µ–æ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ —á–µ—Ä–µ–∑ ' + currentVideo.watchTime + ' —Å–µ–∫—É–Ω–¥.</span>' +
                                        '</div>';
                                    
                                    // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–µ—à–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é
                                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç —Å–∞–º –∑–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                                }}
                                
                                // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å–∫–∞
                                skipButton.disabled = false;
                            }}
                            
                            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                            function stopWatching() {{
                                if (timer) {{
                                    clearInterval(timer);
                                    timer = null;
                                }}
                                
                                if (player && player.pauseVideo) {{
                                    player.pauseVideo();
                                }}
                                
                                watching = false;
                                startButton.textContent = '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä';
                                skipButton.disabled = true;
                            }}
                            
                            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                            startButton.addEventListener('click', () => {{
                                if (watching) {{
                                    stopWatching();
                                }} else {{
                                    watching = true;
                                    startButton.textContent = '‚è∏Ô∏è –ü–∞—É–∑–∞';
                                    playCurrentVideo();
                                }}
                            }});
                            
                            skipButton.addEventListener('click', () => {{
                                if (watching) {{
                                    clearInterval(timer);
                                    
                                    // –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
                                    updateVideoStatus(currentVideoIndex, '–ó–∞–≤–µ—Ä—à–µ–Ω–æ');
                                    
                                    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                                    currentVideoIndex++;
                                    
                                    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–µ
                                    playCurrentVideo();
                                }}
                            }});
                            
                            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                            window.addEventListener('beforeunload', (e) => {{
                                if (watching) {{
                                    e.preventDefault();
                                    e.returnValue = '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ó–∞–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ—Ä–≤–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.';
                                    return e.returnValue;
                                }}
                            }});
                        </script>
                    </body>
                    </html>
                    `;
                    
                    // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                    const blob = new Blob([htmlContent], { type: 'text/html' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'youtube_videos_to_watch.html';
                    a.click();
                    URL.revokeObjectURL(url);
                }
            </script>
        </body>
        </html>
        """
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
    watch_times = []
    for _ in range(len(valid_urls)):
        watch_time = random.randint(min_watch_time, max_watch_time)
        watch_times.append(watch_time)
    
    # –°–æ–∑–¥–∞–µ–º HTML —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    videos_list_html = ""
    for i, (url, time) in enumerate(zip(valid_urls, watch_times)):
        videos_list_html += f"""
        <tr id="video-row-{i}" class="video-row">
            <td>{i+1}</td>
            <td><a href="{url}" target="_blank">{url}</a></td>
            <td>{time} —Å–µ–∫</td>
            <td class="status">–û–∂–∏–¥–∞–µ—Ç</td>
        </tr>
        """
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º JavaScript –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ
    videos_json_items = []
    for url, time in zip(valid_urls, watch_times):
        # –ó–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        safe_url = url.replace('"', '\\"')
        videos_json_items.append(f'{{ url: "{safe_url}", watchTime: {time} }}')
    
    videos_json = ",\n                ".join(videos_json_items)
    
    html_content = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ YouTube –¥–ª—è –æ–±—É—á–µ–Ω–∏—è</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                line-height: 1.6;
                margin: 0;
                padding: 20px;
                background-color: #f0f0f0;
            }}
            
            .container {{
                max-width: 1000px;
                margin: 0 auto;
                background: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            }}
            
            h1 {{
                color: #cc0000;
                text-align: center;
            }}
            
            .warning {{
                background-color: #fff3cd;
                color: #856404;
                padding: 10px;
                border-radius: 5px;
                margin-bottom: 20px;
                border-left: 5px solid #ffeeba;
            }}
            
            .info {{
                background-color: #d1ecf1;
                color: #0c5460;
                padding: 10px;
                border-radius: 5px;
                margin-bottom: 20px;
                border-left: 5px solid #bee5eb;
            }}
            
            .success {{
                background-color: #d4edda;
                color: #155724;
                padding: 10px;
                border-radius: 5px;
                margin-bottom: 20px;
                border-left: 5px solid #c3e6cb;
            }}
            
            .manual-mode {{
                background-color: #ffe0b2;
                color: #e65100;
                padding: 15px;
                border-radius: 5px;
                margin: 20px 0;
                border-left: 5px solid #ffb74d;
            }}
            
            .player-wrapper {{
                display: flex;
                flex-direction: column;
                margin-bottom: 20px;
                background: #000;
                padding: 10px;
                border-radius: 5px;
            }}
            
            #player {{
                width: 100%;
                height: 500px;
                margin-bottom: 10px;
            }}
            
            .controls {{
                display: flex;
                justify-content: space-between;
                align-items: center;
                background: #333;
                color: white;
                padding: 10px;
                border-radius: 5px;
            }}
            
            .progress {{
                flex-grow: 1;
                margin: 0 15px;
                height: 20px;
                background: #444;
                border-radius: 10px;
                overflow: hidden;
                position: relative;
            }}
            
            .progress-bar {{
                height: 100%;
                width: 0;
                background: #cc0000;
                transition: width 0.5s;
            }}
            
            .time-display {{
                font-family: monospace;
                font-size: 16px;
                margin-right: 10px;
            }}
            
            button {{
                background-color: #cc0000;
                color: white;
                border: none;
                padding: 10px 15px;
                cursor: pointer;
                border-radius: 4px;
                font-weight: bold;
            }}
            
            button:hover {{
                background-color: #aa0000;
            }}
            
            button:disabled {{
                background-color: #cccccc;
                cursor: not-allowed;
            }}
            
            .button-alt {{
                background-color: #4CAF50;
                margin-left: 10px;
            }}
            
            .button-alt:hover {{
                background-color: #388E3C;
            }}
            
            table {{
                width: 100%;
                border-collapse: collapse;
                margin-top: 20px;
            }}
            
            th, td {{
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #ddd;
            }}
            
            th {{
                background-color: #f2f2f2;
                font-weight: bold;
            }}
            
            tr.completed {{
                background-color: #e8f5e9;
            }}
            
            tr.playing {{
                background-color: #fff8e1;
            }}
            
            td.status {{
                font-weight: bold;
            }}
            
            .status-playing {{
                color: #ff9800;
            }}
            
            .status-completed {{
                color: #4caf50;
            }}
            
            .video-info {{
                background: #f5f5f5;
                padding: 10px;
                border-radius: 5px;
                margin-top: 10px;
                font-weight: bold;
            }}
            
            .action-cell {{
                text-align: center;
            }}
            
            .open-button {{
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 3px;
                cursor: pointer;
                font-size: 12px;
            }}
            
            .open-button:hover {{
                background-color: #0b7dda;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ YouTube</h1>
            
            <div class="warning">
                <strong>–í–∞–∂–Ω–æ:</strong> –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ YouTube –≤ —Ç–µ–∫—É—â–µ–º –±—Ä–∞—É–∑–µ—Ä–µ.
                –ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–∏–¥–µ–æ.
            </div>
            
            <div class="info">
                <p><strong>–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:</strong></p>
                <ul>
                    <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ YouTube</li>
                    <li>–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</li>
                    <li>–£–ª—É—á—à–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ YouTube –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</li>
                </ul>
            </div>
            
            <div class="manual-mode">
                <h3>üîÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</h3>
                <ol>
                    <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞</li>
                    <li>–î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞</li>
                    <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –æ—Ç–∫—Ä—ã—Ç—É—é –≤–∫–ª–∞–¥–∫—É –∏ –≤—Ä—É—á–Ω—É—é –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ</li>
                    <li>–ü–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É</li>
                    <li>–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –ø–µ—Ä–µ–π–¥–µ—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è</li>
                    <li>–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–∏–¥–µ–æ</li>
                </ol>
                <p>‚ö†Ô∏è <strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã –±–ª–æ–∫–∏—Ä—É—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ.</p>
            </div>
            
            <div class="player-wrapper">
                <div id="player"></div>
                <div class="controls">
                    <button id="startButton">‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä</button>
                    <div class="progress">
                        <div class="progress-bar" id="progressBar"></div>
                    </div>
                    <div class="time-display" id="timeDisplay">00:00 / 00:00</div>
                    <button id="skipButton" disabled>‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</button>
                    <button id="manualButton" class="button-alt" disabled>üîó –û—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ</button>
                </div>
            </div>
            
            <div class="video-info" id="videoInfo">
                –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ {len(valid_urls)} –≤–∏–¥–µ–æ
            </div>
            
            <table>
                <thead>
                    <tr>
                        <th>‚Ññ</th>
                        <th>–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ</th>
                        <th>–í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
                    </tr>
                </thead>
                <tbody id="videosTable">
                    {videos_list_html.replace('</tr>', '<td class="action-cell"><button class="open-button" onclick="openVideoLink(this)">–û—Ç–∫—Ä—ã—Ç—å</button></td></tr>')}
                </tbody>
            </table>
        </div>
        
        <script>
            // –ó–∞–≥—Ä—É–∂–∞–µ–º YouTube API
            var tag = document.createElement('script');
            tag.src = "https://www.youtube.com/iframe_api";
            var firstScriptTag = document.getElementsByTagName('script')[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
            
            // –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ
            const videos = [
                {videos_json}
            ];
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∏–¥–µ–æ
            if (videos.length === 0) {{
                document.getElementById('videoInfo').textContent = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞";
                document.getElementById('startButton').disabled = true;
                alert("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –î–æ–±–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ YouTube-—Å—Å—ã–ª–∫–∏.");
            }}
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const startButton = document.getElementById('startButton');
            const skipButton = document.getElementById('skipButton');
            const manualButton = document.getElementById('manualButton');
            const progressBar = document.getElementById('progressBar');
            const timeDisplay = document.getElementById('timeDisplay');
            const videoInfo = document.getElementById('videoInfo');
            const videosTable = document.getElementById('videosTable');
            
            // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            let currentVideoIndex = 0;
            let watching = false;
            let timer = null;
            let secondsWatched = 0;
            let totalWatched = 0;
            let player;
            
            // –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–µ–æ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            function openVideoLink(buttonElement) {{
                const row = buttonElement.closest('tr');
                const rowIndex = parseInt(row.id.replace('video-row-', ''));
                const video = videos[rowIndex];
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                window.open(video.url, '_blank');
                
                // –û—Ç–º–µ—á–∞–µ–º —è—á–µ–π–∫—É –¥—Ä—É–≥–∏–º —Ü–≤–µ—Ç–æ–º —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞
                buttonElement.style.backgroundColor = '#4CAF50';
                buttonElement.textContent = '–û—Ç–∫—Ä—ã—Ç–æ';
            }}
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –≤–∏–¥–µ–æ –∏–∑ URL YouTube
            function getYouTubeVideoId(url) {{
                const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;
                const match = url.match(regExp);
                return (match && match[7].length === 11) ? match[7] : false;
            }}
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YouTube –ø–ª–µ–µ—Ä–∞
            function onYouTubeIframeAPIReady() {{
                player = new YT.Player('player', {{
                    height: '500',
                    width: '100%',
                    videoId: '',
                    playerVars: {{
                        'autoplay': 0,
                        'controls': 1,
                        'showinfo': 1,
                        'rel': 0,
                        'fs': 1,
                        'modestbranding': 1
                    }},
                    events: {{
                        'onStateChange': onPlayerStateChange
                    }}
                }});
            }}
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–ª–µ–µ—Ä–∞
            function onPlayerStateChange(event) {{
                // –ï—Å–ª–∏ –≤–∏–¥–µ–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å —Å–∞–º–æ
                if (event.data === YT.PlayerState.ENDED) {{
                    // –í–µ–¥–µ–º —Å–µ–±—è –∫–∞–∫ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                    clearInterval(timer);
                    updateVideoStatus(currentVideoIndex, '–ó–∞–≤–µ—Ä—à–µ–Ω–æ');
                    currentVideoIndex++;
                    setTimeout(playCurrentVideo, 1500);
                }}
            }}
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (—Å–µ–∫—É–Ω–¥—ã –≤ MM:SS)
            function formatTime(seconds) {{
                const mins = Math.floor(seconds / 60);
                const secs = Math.floor(seconds % 60);
                return `${{String(mins).padStart(2, '0')}}:${{String(secs).padStart(2, '0')}}`;
            }}
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–∏–¥–µ–æ
            function updateProgress() {{
                if (currentVideoIndex >= videos.length) return;
                
                const currentVideo = videos[currentVideoIndex];
                const percent = (secondsWatched / currentVideo.watchTime) * 100;
                progressBar.style.width = `${{percent}}%`;
                
                timeDisplay.textContent = `${{formatTime(secondsWatched)}} / ${{formatTime(currentVideo.watchTime)}}`;
            }}
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ –≤ —Ç–∞–±–ª–∏—Ü–µ
            function updateVideoStatus(index, status) {{
                const row = document.getElementById(`video-row-${{index}}`);
                if (!row) return;
                
                const statusCell = row.querySelector('.status');
                
                if (status === '–ü—Ä–æ—Å–º–æ—Ç—Ä') {{
                    row.className = 'video-row playing';
                    statusCell.className = 'status status-playing';
                    statusCell.textContent = '–ü—Ä–æ—Å–º–æ—Ç—Ä';
                }} else if (status === '–ó–∞–≤–µ—Ä—à–µ–Ω–æ') {{
                    row.className = 'video-row completed';
                    statusCell.className = 'status status-completed';
                    statusCell.textContent = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
                    totalWatched++;
                }}
            }}
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–µ–æ
            function playCurrentVideo() {{
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–µ–æ
                if (currentVideoIndex >= videos.length) {{
                    stopWatching();
                    videoInfo.innerHTML = `
                        <div class="success">
                            <strong>‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!</strong> –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ ${{totalWatched}} –∏–∑ ${{videos.length}} –≤–∏–¥–µ–æ.<br>
                            –¢–µ–ø–µ—Ä—å –≤—Å–µ —ç—Ç–∏ –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ YouTube.
                        </div>
                    `;
                    alert('–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
                    return;
                }}
                
                const currentVideo = videos[currentVideoIndex];
                const videoId = getYouTubeVideoId(currentVideo.url);
                
                if (!videoId) {{
                    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –≤–∏–¥–µ–æ –¥–ª—è:', currentVideo.url);
                    currentVideoIndex++;
                    playCurrentVideo();
                    return;
                }}
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                videoInfo.innerHTML = `
                    <strong>–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ ${{currentVideoIndex + 1}} –∏–∑ ${{videos.length}}:</strong><br>
                    <a href="${{currentVideo.url}}" target="_blank">${{currentVideo.url}}</a><br>
                    <span style="color: #4caf50;">–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ" –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é.</span>
                `;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                updateVideoStatus(currentVideoIndex, '–ü—Ä–æ—Å–º–æ—Ç—Ä');
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                secondsWatched = 0;
                updateProgress();
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é API
                if (player && player.loadVideoById) {{
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                    player.loadVideoById({{
                        'videoId': videoId,
                        'startSeconds': 0,
                        'suggestedQuality': 'large'
                    }});
                    player.playVideo();
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    setTimeout(function() {{
                        player.setVolume(50);
                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
                        player.playVideo();
                    }}, 1000);
                }}
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
                if (timer) {{
                    clearInterval(timer);
                }}
                
                timer = setInterval(() => {{
                    secondsWatched++;
                    updateProgress();
                    
                    // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                    if (secondsWatched >= currentVideo.watchTime) {{
                        // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
                        updateVideoStatus(currentVideoIndex, '–ó–∞–≤–µ—Ä—à–µ–Ω–æ');
                        
                        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                        currentVideoIndex++;
                        
                        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                        clearInterval(timer);
                        
                        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–∏–¥–µ–æ
                        setTimeout(playCurrentVideo, 1500);
                    }}
                }}, 1000);
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                if (secondsWatched === 0) {{
                    // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                    // –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
                    const newTab = window.open(currentVideo.url, '_blank');
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    videoInfo.innerHTML = '<div class="warning">' +
                        '<strong style="color: #ff9800;">‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!</strong> –û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ —Å –≤–∏–¥–µ–æ ' + (currentVideoIndex + 1) + '/' + videos.length + '.<br>' +
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –æ—Ç–∫—Ä—ã—Ç—É—é –≤–∫–ª–∞–¥–∫—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∏–∫–æ–º.<br>' +
                        '–≠—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ó–∞–∫—Ä–æ–π—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.<br>' +
                        '<span style="color: #4caf50;">‚úì –í–∏–¥–µ–æ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ —á–µ—Ä–µ–∑ ' + currentVideo.watchTime + ' —Å–µ–∫—É–Ω–¥.</span>' +
                        '</div>';
                }}
                
                // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å–∫–∞ –∏ –∫–Ω–æ–ø–∫—É —Ä—É—á–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è
                skipButton.disabled = false;
                manualButton.disabled = false;
            }}
            
            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            function stopWatching() {{
                if (timer) {{
                    clearInterval(timer);
                    timer = null;
                }}
                
                if (player && player.pauseVideo) {{
                    player.pauseVideo();
                }}
                
                watching = false;
                startButton.textContent = '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä';
                skipButton.disabled = true;
                manualButton.disabled = true;
            }}
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            startButton.addEventListener('click', () => {{
                if (watching) {{
                    stopWatching();
                }} else {{
                    watching = true;
                    startButton.textContent = '‚è∏Ô∏è –ü–∞—É–∑–∞';
                    playCurrentVideo();
                }}
            }});
            
            skipButton.addEventListener('click', () => {{
                if (watching) {{
                    clearInterval(timer);
                    
                    // –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
                    updateVideoStatus(currentVideoIndex, '–ó–∞–≤–µ—Ä—à–µ–Ω–æ');
                    
                    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                    currentVideoIndex++;
                    
                    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–µ
                    playCurrentVideo();
                }}
            }});
            
            manualButton.addEventListener('click', () => {{
                if (watching && currentVideoIndex < videos.length) {{
                    const currentVideo = videos[currentVideoIndex];
                    window.open(currentVideo.url, '_blank');
                }}
            }});
            
            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            window.addEventListener('beforeunload', (e) => {{
                if (watching) {{
                    e.preventDefault();
                    e.returnValue = '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ó–∞–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ—Ä–≤–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.';
                    return e.returnValue;
                }}
            }});
        </script>
    </body>
    </html>
    """
    
    return html_content

if __name__ == "__main__":
    main() 