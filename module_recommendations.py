import os
import time
import logging
import tempfile
import concurrent.futures
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime, timedelta
import pandas as pd
import streamlit as st
import base64
import random
import json
import hashlib
import uuid
from io import BytesIO
import re
import traceback

from youtube_scraper import YouTubeAnalyzer
from utils import parse_youtube_url

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ –¥–∞—Ç–µ
def filter_by_date(df: pd.DataFrame, max_days: int) -> pd.DataFrame:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç DataFrame –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    
    Args:
        df (pd.DataFrame): DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–∏–¥–µ–æ.
        max_days (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
        
    Returns:
        pd.DataFrame: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame.
    """
    if max_days <= 0 or "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏" not in df.columns:
        return df
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –≤ datetime –æ–±—ä–µ–∫—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        if pd.api.types.is_string_dtype(df["–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"]):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ datetime
            df_with_date = df.copy()
            df_with_date["temp_date"] = pd.to_datetime(df["–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"], errors="coerce")
            
            # –†–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            now = datetime.now()
            days_since = (now - df_with_date["temp_date"]).dt.days
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º
            mask = days_since <= max_days
            return df_with_date[mask].drop(columns=["temp_date"])
        else:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ datetime
            now = datetime.now()
            days_since = (now - df["–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"]).dt.days
            return df[days_since <= max_days]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ: {e}")
        return df

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
def filter_by_views(df: pd.DataFrame, min_views: int) -> pd.DataFrame:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç DataFrame –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.
    
    Args:
        df (pd.DataFrame): DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–∏–¥–µ–æ.
        min_views (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.
        
    Returns:
        pd.DataFrame: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame.
    """
    if min_views <= 0 or "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤" not in df.columns:
        return df
    
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–∞
        views_col = df["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"].copy()
        
        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —É–∂–µ —á–∏—Å–ª–æ–≤—ã–µ
        if pd.api.types.is_numeric_dtype(views_col):
            return df[views_col >= min_views]
        
        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–æ–≤—ã–µ, –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
        # –£–¥–∞–ª—è–µ–º –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–∞
        df_with_numeric_views = df.copy()
        df_with_numeric_views["numeric_views"] = views_col.astype(str).str.replace(r'[^\d]', '', regex=True).astype(float)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        mask = df_with_numeric_views["numeric_views"] >= min_views
        return df_with_numeric_views[mask].drop(columns=["numeric_views"])
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º: {e}")
        return df

def filter_by_search(df: pd.DataFrame, search_query: str) -> pd.DataFrame:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç DataFrame –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –≤–∏–¥–µ–æ.
    
    Args:
        df (pd.DataFrame): DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–∏–¥–µ–æ.
        search_query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
        
    Returns:
        pd.DataFrame: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame.
    """
    if not search_query or search_query.strip() == "":
        return df
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –ø–æ–∏—Å–∫–∞
    search_query = search_query.lower()
    
    # –ò—â–µ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –≤–∏–¥–µ–æ
    if "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ" in df.columns:
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä
        mask = df["–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ"].str.lower().str.contains(search_query, na=False)
        return df[mask]
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π DataFrame
        return df

def clean_youtube_url(url: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç URL YouTube –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π URL —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –≤–∏–¥–µ–æ.
    
    Args:
        url (str): –ò—Å—Ö–æ–¥–Ω—ã–π URL YouTube.
        
    Returns:
        str: –û—á–∏—â–µ–Ω–Ω—ã–π URL YouTube –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://www.youtube.com/watch?v=ID_VIDEO
    """
    if not url or not isinstance(url, str):
        return url
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ YouTube URL
    if "youtube.com/watch" not in url and "youtu.be/" not in url:
        return url
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫ youtu.be
        if "youtu.be/" in url:
            video_id = url.split("youtu.be/")[1].split("?")[0].split("#")[0]
            return f"https://www.youtube.com/watch?v={video_id}"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ youtube.com/watch?v=
        if "youtube.com/watch" in url:
            # –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä v=
            if "v=" in url:
                video_id = url.split("v=")[1].split("&")[0].split("#")[0]
                return f"https://www.youtube.com/watch?v={video_id}"
            
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL
        return url
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ YouTube URL: {e}")
        return url

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ
def display_results_tab1():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ CSV –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π".
    """
    if "results_df" in st.session_state and not st.session_state["results_df"].empty:
        # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å 1 –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML
        results_df_display = st.session_state["results_df"].copy()
        st.write(results_df_display.to_html(escape=False), unsafe_allow_html=True)
        
        # –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–µ–∑ –∫–Ω–æ–ø–∫–∏
        export_df = st.session_state["results_df"].copy()
        if "–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ" in export_df.columns:
            export_df["–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ"] = export_df["–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ"].str.replace(r'<a href="(.+?)".*?>.*?</a>', r'\1', regex=True)
        
        # –û—á–∏—â–∞–µ–º –∫–æ–ª–æ–Ω–∫—É "–ö–∞–Ω–∞–ª" –æ—Ç HTML-—Ç–µ–≥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        if "–ö–∞–Ω–∞–ª" in export_df.columns:
            export_df["–ö–∞–Ω–∞–ª"] = export_df["–ö–∞–Ω–∞–ª"].str.replace(r'<a href="(.+?)".*?>.*?</a>', r'\1', regex=True)
        
        csv = export_df.to_csv(index=False, sep='\t')
        b64 = base64.b64encode(csv.encode()).decode()
        href = f'<div style="text-align: right; margin: 10px 0;"><a href="data:file/csv;base64,{b64}" download="youtube_results.tsv" style="background-color: #4CAF50; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px;">üìä –°–∫–∞—á–∞—Ç—å TSV —Ñ–∞–π–ª</a></div>'
        st.markdown(href, unsafe_allow_html=True)

def test_recommendations(source_links: List[str], 
                         google_account: Dict[str, str] = None, 
                         prewatch_settings: Dict[str, Any] = None,
                         channel_videos_limit: int = 5,
                         recommendations_per_video: int = 5,
                         max_days_since_publication: int = 7,
                         min_video_views: int = 10000,
                         existing_analyzer: YouTubeAnalyzer = None) -> pd.DataFrame:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.
    
    Args:
        source_links (List[str]): –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ/–∫–∞–Ω–∞–ª—ã YouTube
        google_account (Dict[str, str], optional): –ê–∫–∫–∞—É–Ω—Ç Google –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        prewatch_settings (Dict[str, Any], optional): –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        channel_videos_limit (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞
        recommendations_per_video (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
        max_days_since_publication (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        min_video_views (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        existing_analyzer (YouTubeAnalyzer, optional): –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        
    Returns:
        pd.DataFrame: –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    results = []
    source_videos = []  # –í–∏–¥–µ–æ —Å –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, –æ–Ω–∏ –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    progress_bar = st.progress(0)
    status_text = st.empty()
    stats_container = st.container()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    stats = {
        "processed_links": 0,
        "processed_videos": 0,
        "skipped_views": 0,
        "skipped_date": 0,
        "added_videos": 0,
        "total_time": 0,
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        "time_get_recommendations": 0,
        "time_get_video_data": 0,
        "count_get_recommendations": 0,
        "count_get_video_data": 0
    }
    
    # –¢–∞–π–º–µ—Ä—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    timers = {
        "current_operation_start": 0,
        "recommendation_times": [],
        "video_data_times": []
    }
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤
    def start_timer(operation_name):
        timers["current_operation"] = operation_name
        timers["current_operation_start"] = time.time()
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation_name}")
        
    def end_timer(operation_name):
        if timers["current_operation_start"] == 0:
            return 0
            
        elapsed_time = time.time() - timers["current_operation_start"]
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation_name}, –≤—Ä–µ–º—è: {elapsed_time:.2f}—Å")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if "–ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π" in operation_name.lower():
            timers["recommendation_times"].append(elapsed_time)
            stats["time_get_recommendations"] += elapsed_time
            stats["count_get_recommendations"] += 1
        elif "–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö" in operation_name.lower():
            timers["video_data_times"].append(elapsed_time)
            stats["time_get_video_data"] += elapsed_time
            stats["count_get_video_data"] += 1
            
        return elapsed_time
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    def update_timing_stats():
        pass
    
    start_time = time.time()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
    if existing_analyzer and existing_analyzer.driver:
        youtube_analyzer = existing_analyzer
        status_text.text("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –±—Ä–∞—É–∑–µ—Ä–∞...")
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ YouTube")
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä YouTube
        status_text.text("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞...")
        youtube_analyzer = YouTubeAnalyzer(headless=True, use_proxy=False, google_account=google_account)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä–∞–π–≤–µ—Ä
        youtube_analyzer.setup_driver()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –¥—Ä–∞–π–≤–µ—Ä
        if youtube_analyzer.driver is None:
            status_text.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
            return pd.DataFrame()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏ YouTube
        valid_links = [link.strip() for link in source_links if "youtube.com" in link or "youtu.be" in link]
        
        if not valid_links:
            status_text.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ YouTube. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫.")
            return pd.DataFrame()
            
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä, –≤—ã–ø–æ–ª–Ω—è–µ–º –µ–≥–æ
        if prewatch_settings and prewatch_settings.get("enabled", False):
            # –õ–æ–≥–∏–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞...
            pass
        
        status_text.text(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(valid_links)} —Å—Å—ã–ª–æ–∫...")
        
        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        all_video_sources = []
        all_recommendations = []
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        last_update_time = 0
        update_interval = 5.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ 5 —Å–µ–∫—É–Ω–¥
        last_processed_videos = 0
        last_added_videos = 0
        link_stats = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–µ
        
        def update_stats(force=False, current_link=None, source_videos_count=0, recommendations_count=0):
            nonlocal last_update_time, last_processed_videos, last_added_videos
            current_time = time.time()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
            # 1. –ü—Ä–æ—à–ª–æ –Ω–µ –º–µ–Ω–µ–µ update_interval —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            # 2. –ò–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (force=True)
            # 3. –ò–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö/–¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
            substantial_change = (stats['processed_videos'] - last_processed_videos >= 5) or (stats['added_videos'] - last_added_videos >= 5)
            
            if not (force or substantial_change or (current_time - last_update_time >= update_interval)):
                return
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Å—á–µ—Ç—á–∏–∫–∏
            last_update_time = current_time
            last_processed_videos = stats['processed_videos']
            last_added_videos = stats['added_videos']
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            time_elapsed = current_time - start_time
            stats["total_time"] = time_elapsed
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            with stats_container:
                if current_link:
                    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ç–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –Ω–µ—ë
                    if current_link not in link_stats:
                        link_stats[current_link] = {
                            "source_videos": source_videos_count,
                            "recommendations": recommendations_count
                        }
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        if source_videos_count > 0:
                            link_stats[current_link]["source_videos"] = source_videos_count
                        if recommendations_count > 0:
                            link_stats[current_link]["recommendations"] = recommendations_count
                    
                    st.markdown(f"–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {current_link} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã {link_stats[current_link]['source_videos']} –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞/–∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ {link_stats[current_link]['recommendations']} –≤–∏–¥–µ–æ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
                else:
                    # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –Ω–æ —ç—Ç–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
                    if force and stats['processed_links'] > 0 and stats['processed_links'] <= len(valid_links):
                        last_link = valid_links[stats['processed_links']-1]
                        if last_link in link_stats:
                            st.markdown(f"–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {last_link} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã {link_stats[last_link]['source_videos']} –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞/–∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ {link_stats[last_link]['recommendations']} –≤–∏–¥–µ–æ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            update_timing_stats()
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        def quick_filter_video(video_data):
            if not video_data:
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã (–±—ã—Å—Ç—Ä–µ–µ –ø–æ–ª—É—á–∏—Ç—å)
            views_count = video_data.get("views", 0)
            # –ó–∞—â–∏—Ç–∞ –æ—Ç None –∑–Ω–∞—á–µ–Ω–∏–π
            if views_count is None:
                views_count = 0
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ views_count - —á–∏—Å–ª–æ
            if not isinstance(views_count, (int, float)):
                try:
                    views_count = int(views_count)
                except (ValueError, TypeError):
                    views_count = 0
                    
            if views_count < min_video_views:
                stats["skipped_views"] += 1
                logger.info(f"–í–∏–¥–µ–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {video_data.get('url')} (–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {views_count}, –º–∏–Ω–∏–º—É–º: {min_video_views})")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            pub_date = video_data.get("publication_date")
            if pub_date:
                try:
                    days_since_publication = (datetime.now() - pub_date).days
                    if days_since_publication > max_days_since_publication:
                        stats["skipped_date"] += 1
                        logger.info(f"–í–∏–¥–µ–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—é –¥–∞—Ç—ã: {video_data.get('url')} (–¥–Ω–µ–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {days_since_publication}, –º–∞–∫—Å–∏–º—É–º: {max_days_since_publication})")
                        return False
                except Exception as e:
                    # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–Ω–µ–π, –ª—É—á—à–µ –Ω–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —ç—Ç–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è {video_data.get('url')}: {e}")
            else:
                logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è {video_data.get('url')}")
                
            # –í–∏–¥–µ–æ –ø—Ä–æ—à–ª–æ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            logger.info(f"–í–∏–¥–µ–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º: {video_data.get('url')} (–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {views_count}, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º)")
            return True

        for i, link in enumerate(valid_links):
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_value = float(i) / len(valid_links)
            progress_bar.progress(progress_value)
            status_text.text(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É {i+1}/{len(valid_links)}: {link}")
            stats["processed_links"] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏ (–∫–∞–Ω–∞–ª –∏–ª–∏ –≤–∏–¥–µ–æ)
            url, is_channel = parse_youtube_url(link)
            
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞/–≤–∏–¥–µ–æ
            source_videos_before = len(source_videos)
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            recommendations_before = len(all_recommendations)
            
            if is_channel:
                # –î–ª—è –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º channel_videos_limit)
                status_text.text(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞: {url}")
                start_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞: {url}")
                channel_videos = youtube_analyzer.get_last_videos_from_channel(url, limit=channel_videos_limit)
                channel_time = end_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞: {url}")
                status_text.text(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞ –∑–∞ {channel_time:.2f}—Å")
                
                if not channel_videos:
                    status_text.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞ {url}")
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞
                for video_index, video_info in enumerate(channel_videos):
                    video_url = video_info.get("url") if isinstance(video_info, dict) else video_info
                    if not video_url:
                        continue
                    
                    stats["processed_videos"] += 1
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ {video_index+1}/{len(channel_videos)} —Å –∫–∞–Ω–∞–ª–∞: {video_url}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤–∏–¥–µ–æ
                    status_text.text(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≤–∏–¥–µ–æ: {video_url}")
                    start_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ: {video_url}")
                    
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –≤–º–µ—Å—Ç–æ get_video_details
                        video_data_df = youtube_analyzer.test_video_parameters_fast([video_url])
                        
                        video_data = None
                        if not video_data_df.empty:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞—Ä—è, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –∏—Å—Ö–æ–¥–Ω—ã–º
                            video_data = {
                                "url": clean_youtube_url(video_url),
                                "title": video_data_df.iloc[0]["–ó–∞–≥–æ–ª–æ–≤–æ–∫"],
                                "views": video_data_df.iloc[0]["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã_—á–∏—Å–ª–æ"] if "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã_—á–∏—Å–ª–æ" in video_data_df.columns else int(video_data_df.iloc[0]["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"].replace(" ", "")),
                                "publication_date": datetime.now() - timedelta(days=int(video_data_df.iloc[0]["–î–Ω–µ–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"])) if video_data_df.iloc[0]["–î–Ω–µ–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"] != "‚Äî" else datetime.now(),
                                "channel_name": "YouTube",  # –ò–º—è –∫–∞–Ω–∞–ª–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥
                                "channel_url": video_data_df.iloc[0]["–ö–∞–Ω–∞–ª URL"] if "–ö–∞–Ω–∞–ª URL" in video_data_df.columns else None
                            }
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ: {e}")
                        video_data = None
                    
                    video_data_time = end_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ: {video_url}")
                    status_text.text(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –∑–∞ {video_data_time:.2f}—Å")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
                    status_text.text(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ: {video_url}")
                    start_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ: {video_url}")
                    
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ
                        recommendations = youtube_analyzer.get_recommended_videos_fast(video_url, limit=recommendations_per_video)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
                        recommendations = []
                    
                    rec_time = end_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ: {video_url}")
                    status_text.text(f"–ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(recommendations)}) –∑–∞ {rec_time:.2f}—Å")
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ {video_url}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    recommendation_urls = []
                    for rec_info in recommendations:
                        rec_url = rec_info.get("url") if isinstance(rec_info, dict) else rec_info
                        if rec_url:
                            # –û—á–∏—â–∞–µ–º URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                            clean_rec_url = clean_youtube_url(rec_url)
                            recommendation_urls.append({
                                "url": clean_rec_url,
                                "source_video": clean_youtube_url(video_url)
                            })
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                    all_recommendations.extend(recommendation_urls)
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(recommendation_urls)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ {video_url}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–∏–¥–µ–æ —Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º 
                    # –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                    if video_data and quick_filter_video(video_data):
                        video_data["source"] = f"–ö–∞–Ω–∞–ª: {link}"
                        source_videos.append(video_data)
                        stats["added_videos"] += 1
                    else:
                        # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
                        if video_data:
                            status_text.text(f"–í–∏–¥–µ–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É: {video_url}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞
                current_source_videos = len(source_videos) - source_videos_before
                current_recommendations = len(all_recommendations) - recommendations_before
                update_stats(force=True, current_link=url, source_videos_count=current_source_videos, recommendations_count=current_recommendations)
            else:
                # –î–ª—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ
                status_text.text(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≤–∏–¥–µ–æ: {url}")
                start_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ: {url}")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤–∏–¥–µ–æ
                status_text.text(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≤–∏–¥–µ–æ: {url}")
                start_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ: {url}")
                
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –≤–º–µ—Å—Ç–æ get_video_details
                    video_data_df = youtube_analyzer.test_video_parameters_fast([url])
                    
                    video_data = None
                    if not video_data_df.empty:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞—Ä—è, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –∏—Å—Ö–æ–¥–Ω—ã–º
                        video_data = {
                            "url": clean_youtube_url(url),
                            "title": video_data_df.iloc[0]["–ó–∞–≥–æ–ª–æ–≤–æ–∫"],
                            "views": video_data_df.iloc[0]["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã_—á–∏—Å–ª–æ"] if "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã_—á–∏—Å–ª–æ" in video_data_df.columns else int(video_data_df.iloc[0]["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"].replace(" ", "")),
                            "publication_date": datetime.now() - timedelta(days=int(video_data_df.iloc[0]["–î–Ω–µ–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"])) if video_data_df.iloc[0]["–î–Ω–µ–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"] != "‚Äî" else datetime.now(),
                            "channel_name": "YouTube",  # –ò–º—è –∫–∞–Ω–∞–ª–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥
                            "channel_url": video_data_df.iloc[0]["–ö–∞–Ω–∞–ª URL"] if "–ö–∞–Ω–∞–ª URL" in video_data_df.columns else None
                        }
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ: {e}")
                    video_data = None
                
                video_data_time = end_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ: {url}")
                status_text.text(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –∑–∞ {video_data_time:.2f}—Å")
                stats["processed_videos"] += 1
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
                status_text.text(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ: {url}")
                start_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ: {url}")
                
                try:
                    recommendations = youtube_analyzer.get_recommended_videos_fast(url, limit=recommendations_per_video)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
                    recommendations = []
                
                rec_time = end_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ: {url}")
                status_text.text(f"–ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(recommendations)}) –∑–∞ {rec_time:.2f}—Å")
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ {url}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                recommendation_urls = []
                for rec_info in recommendations:
                    rec_url = rec_info.get("url") if isinstance(rec_info, dict) else rec_info
                    if rec_url:
                        # –û—á–∏—â–∞–µ–º URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                        clean_rec_url = clean_youtube_url(rec_url)
                        recommendation_urls.append({
                            "url": clean_rec_url,
                            "source_video": clean_youtube_url(url)
                        })
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                all_recommendations.extend(recommendation_urls)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(recommendation_urls)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ {url}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–∏–¥–µ–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É
                if video_data and quick_filter_video(video_data):
                    video_data["source"] = f"–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {link}"
                    source_videos.append(video_data)
                    stats["added_videos"] += 1
                else:
                    # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
                    if video_data:
                        status_text.text(f"–í–∏–¥–µ–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É: {url}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
                current_source_videos = len(source_videos) - source_videos_before
                current_recommendations = len(all_recommendations) - recommendations_before
                update_stats(force=True, current_link=url, source_videos_count=current_source_videos, recommendations_count=current_recommendations)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –≤–∏–¥–µ–æ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        # –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∫–∞–∫ –¥—É–±–ª–∏–∫–∞—Ç—ã
        results = source_videos + results
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(all_recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(all_recommendations)} —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        unique_recommendations = {}
        for rec in all_recommendations:
            rec_url = rec["url"]
            # –ï—Å–ª–∏ —Ç–∞–∫–æ–π URL —É–∂–µ –±—ã–ª, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫
            if rec_url in unique_recommendations:
                unique_recommendations[rec_url]["sources"].append(rec["source_video"])
            else:
                unique_recommendations[rec_url] = {
                    "url": rec_url,
                    "sources": [rec["source_video"]]
                }
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫
        filtered_recommendations = list(unique_recommendations.values())
        status_text.text(f"–û—Å—Ç–∞–ª–æ—Å—å {len(filtered_recommendations)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        logger.info(f"–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å {len(filtered_recommendations)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        processed_recommendations = 0
        added_recommendations = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        batch_size = 5  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∑–∞ —Ä–∞–∑
        for i in range(0, len(filtered_recommendations), batch_size):
            batch = filtered_recommendations[i:i+batch_size]
            status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π {i+1}-{min(i+batch_size, len(filtered_recommendations))} –∏–∑ {len(filtered_recommendations)}")
            
            # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –≤—Å–µ–≥–æ –ø–∞–∫–µ—Ç–∞
            start_timer(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π {i+1}-{min(i+batch_size, len(filtered_recommendations))}")
            
            for rec in batch:
                rec_url = rec["url"]
                processed_recommendations += 1
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
                start_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {rec_url}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –≤–º–µ—Å—Ç–æ get_video_details
                rec_data_df = youtube_analyzer.test_video_parameters_fast([rec_url])
                rec_data = None
                if not rec_data_df.empty:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞—Ä—è, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –∏—Å—Ö–æ–¥–Ω—ã–º
                    try:
                        rec_data = {
                            "url": rec_url,  # URL —É–∂–µ –æ—á–∏—â–µ–Ω –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —ç—Ç–∞–ø–µ
                            "title": rec_data_df.iloc[0]["–ó–∞–≥–æ–ª–æ–≤–æ–∫"],
                            "views": rec_data_df.iloc[0]["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã_—á–∏—Å–ª–æ"] if "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã_—á–∏—Å–ª–æ" in rec_data_df.columns else int(rec_data_df.iloc[0]["–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"].replace(" ", "")),
                            "publication_date": datetime.now() - timedelta(days=int(rec_data_df.iloc[0]["–î–Ω–µ–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"])) if rec_data_df.iloc[0]["–î–Ω–µ–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"] != "‚Äî" else datetime.now(),
                            "channel_name": "YouTube",  # –ò–º—è –∫–∞–Ω–∞–ª–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥
                            "channel_url": rec_data_df.iloc[0]["–ö–∞–Ω–∞–ª URL"] if "–ö–∞–Ω–∞–ª URL" in rec_data_df.columns else None
                        }
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ {rec_url}: {e}")
                        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞
                        rec_data = {
                            "url": rec_url,
                            "title": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫",
                            "views": min_video_views,  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ –ø—Ä–æ–π–¥–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
                            "publication_date": datetime.now(),  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ –ø—Ä–æ–π–¥–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –¥–∞—Ç–µ
                            "channel_name": "YouTube",
                            "channel_url": None
                        }
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ {rec_url}")
                
                video_data_time = end_timer(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {rec_url}")
                stats["processed_videos"] += 1
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–º –≤–∏–¥–µ–æ
                if rec_data and quick_filter_video(rec_data):
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç–æ–∂–µ –æ—á–∏—â–µ–Ω—ã –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    clean_sources = [clean_youtube_url(src) for src in rec["sources"]]
                    source_str = ", ".join([f"–≤–∏–¥–µ–æ {src.split('watch?v=')[-1]}" for src in clean_sources])
                    rec_data["source"] = f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è: {source_str}"
                    results.append(rec_data)
                    stats["added_videos"] += 1
                    added_recommendations += 1
                    logger.info(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è {rec_url} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–≤—Å–µ–≥–æ: {added_recommendations})")
                else:
                    if rec_data:
                        logger.info(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è {rec_url} –Ω–µ –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")
            
            # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—Å–µ–≥–æ –ø–∞–∫–µ—Ç–∞
            batch_time = end_timer(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π {i+1}-{min(i+batch_size, len(filtered_recommendations))}")
            status_text.text(f"–ü–∞–∫–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {batch_time:.2f}—Å")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_bar.progress(1.0)
        status_text.text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if results:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
            results_df = pd.DataFrame(results)
            
            # –û—á–∏—â–∞–µ–º –≤—Å–µ URL-–∞–¥—Ä–µ—Å–∞ –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–µ –æ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if "url" in results_df.columns:
                results_df["url"] = results_df["url"].apply(clean_youtube_url)
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ URL –≤–∏–¥–µ–æ, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω—ã–µ –≤–∏–¥–µ–æ (–∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–µ—Ä–≤—ã–º–∏) —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è
            seen_urls = set()
            unique_df_rows = []
            
            for idx, row in results_df.iterrows():
                url = row["url"]
                if url not in seen_urls:
                    seen_urls.add(url)
                    unique_df_rows.append(row)
            
            results_df = pd.DataFrame(unique_df_rows)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å 1 –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            results_df.index = range(1, len(results_df) + 1)
            
            # –í—ã–±–∏—Ä–∞–µ–º –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            columns_to_show = {
                "url": "–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ",
                "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ",
                "publication_date": "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                "views": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
                "source": "–ò—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ",
                "channel_url": "–ö–∞–Ω–∞–ª"
            }
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            existing_columns = {k: v for k, v in columns_to_show.items() if k in results_df.columns}
            
            if existing_columns:
                results_df = results_df[list(existing_columns.keys())]
                results_df = results_df.rename(columns=existing_columns)
                
                # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ URL –≤–∏–¥–µ–æ
                results_df = results_df.drop_duplicates(subset=["–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ"])
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Å—ã–ª–∫–∏ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Streamlit
                results_df["–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ"] = results_df["–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ"].apply(
                    lambda x: f'<a href="{x}" target="_blank">{x}</a>' if isinstance(x, str) else x
                )
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Streamlit
                if "–ö–∞–Ω–∞–ª" in results_df.columns:
                    results_df["–ö–∞–Ω–∞–ª"] = results_df["–ö–∞–Ω–∞–ª"].apply(
                        lambda x: f'<a href="{x}" target="_blank">{x}</a>' if isinstance(x, str) and x else x
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∫–∞–Ω–∞–ª–∞, –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if "–ö–∞–Ω–∞–ª" in results_df.columns and "channel_url" not in results_df.columns:
                        results_df["URL –∫–∞–Ω–∞–ª–∞"] = results_df["–ö–∞–Ω–∞–ª"]
                
                return results_df
            else:
                return pd.DataFrame()
        else:
            return pd.DataFrame()
    except Exception as e:
        status_text.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        traceback.print_exc()
        return pd.DataFrame()
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –∏–∑–≤–Ω–µ
        if youtube_analyzer and youtube_analyzer is not existing_analyzer:
            youtube_analyzer.quit_driver()

def render_recommendations_section():
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
    """
    st.header("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π YouTube")
    
    # –°—Ç–∞–¥–∏—è 2: –°–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    st.header("–°—Ç–∞–¥–∏—è 2: –°–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    with st.expander("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö", expanded=True):
        source_option = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Å—ã–ª–æ–∫:",
            options=["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞"],
            index=0
        )
        
        source_links = []
        
        if source_option == "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
            source_input = st.text_area(
                "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –∫–∞–Ω–∞–ª—ã YouTube (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)",
                height=150
            )
            
            if source_input:
                source_links = [line.strip() for line in source_input.split("\n") if line.strip()]
        else:  # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
            source_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)", type=["txt"])
            
            if source_file:
                source_content = source_file.read().decode("utf-8")
                source_links = [line.strip() for line in source_content.split("\n") if line.strip()]
        
        if source_links:
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(source_links)} —Å—Å—ã–ª–æ–∫.")
            
            # –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä —Å—Å—ã–ª–æ–∫ (–Ω–µ –±–æ–ª–µ–µ 5)
            if len(source_links) > 0:
                st.write("–ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:")
                for i, link in enumerate(source_links[:5]):
                    st.write(f"{i+1}. {link}")
                
                if len(source_links) > 5:
                    st.write(f"...–∏ –µ—â–µ {len(source_links) - 5} —Å—Å—ã–ª–æ–∫")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã–µ –∏–∑ –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
    with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±–æ—Ä–∞", expanded=True):
        col1, col2 = st.columns(2)
        with col1:
            channel_videos_limit = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞", 
                min_value=1, 
                max_value=200, 
                value=5
            )
        with col2:
            recommendations_per_video = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ", 
                min_value=1, 
                max_value=500, 
                value=5
            )
        
        col3, col4 = st.columns(2)
        with col3:
            max_days_since_publication = st.number_input(
                "–í—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–¥–Ω–µ–π)", 
                min_value=1, 
                max_value=100000,
                value=7
            )
        with col4:
            min_video_views = st.number_input(
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", 
                min_value=0, 
                max_value=1000000, 
                value=10000,
                step=1000
            )
    
    # –ö–Ω–æ–ø–∫–∞ —Å–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if st.button("–°–æ–±—Ä–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
        if source_links:
            with st.spinner("–°–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π..."):
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –¥—Ä–∞–π–≤–µ—Ä
                existing_analyzer = st.session_state.get("auth_analyzer")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
                google_account = st.session_state.get("google_account")
                
                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –¥—Ä–∞–π–≤–µ—Ä–æ–º
                results_df = test_recommendations(
                    source_links, 
                    google_account=google_account, 
                    prewatch_settings=None,  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
                    channel_videos_limit=channel_videos_limit,
                    recommendations_per_video=recommendations_per_video,
                    max_days_since_publication=max_days_since_publication,
                    min_video_views=min_video_views,
                    existing_analyzer=existing_analyzer
                )
                
                if not results_df.empty:
                    st.session_state["results_df"] = results_df
                    st.success(f"–°–æ–±—Ä–∞–Ω–æ {len(results_df)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    display_results_tab1()
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.")
                    # –í—ã–≤–æ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    st.error("–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
                    st.write("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º")
                    st.write("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–∞ –∏ —Å–µ—Ç–∏")
        else:
            st.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if "results_df" in st.session_state and not st.session_state["results_df"].empty:
                st.success(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ({len(st.session_state['results_df'])} –∑–∞–ø–∏—Å–µ–π).")
                display_results_tab1() 